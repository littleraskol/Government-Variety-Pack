# Government Variety Pack
# Events - Chartered Colony/Company Stuff
# Author: littleraskol

namespace = lrsk_gov_var_chartered

# Whenever a country becomes a subject, determine if charter choice should be given to overlord
country_event = {
	id = lrsk_gov_var_chartered.1

  	hide_window = yes
    is_triggered_only = yes

    trigger = {
        from = { has_valid_civic = lrsk_gov_var_civic_mc_chart_corp_board }
        NOR = {
            has_ethic = ethic_gestalt_consciousness
            is_subject_type = lrsk_gov_var_subject_chartered_company    # not sure how this would happen but...
            has_origin = lrsk_gov_var_origin_uplift                     # prevent immediate change in subject status etc. if tutor can use chartered company subjects
            # Prevent sublight colonies from being chartered
            OR = {
                has_origin = lrsk_gov_var_origin_sublight_colony_loy
                has_origin = lrsk_gov_var_origin_sublight_colony_gsp
                has_origin = lrsk_gov_var_origin_sublight_colony_dis
            }
        }
    }

    immediate = {
        log = "In chartered colony pre-choice event. Overlord = [from.GetName], subject = [this.GetName]"

        from = {
            save_event_target_as = lrsk_chartering_agent
            owner_species = { save_event_target_as = lrsk_chartering_agent_species }
        }

        # Detect if same species to modify event text later
        if = { limit = { owner_species = { is_same_value = event_target:lrsk_chartering_agent_species } }
            set_country_flag = lrsk_charter_subject_same_species_as_ol
        }

        from = { country_event = { id = lrsk_gov_var_chartered.4 days = 3 } } # delayed to help play nice with vassal mods.
    }
}

country_event = {
	id = lrsk_gov_var_chartered.2
	title = lrsk_gov_var_chartered.2.name
	picture = GFX_evt_partition
	location = from

    desc = {
        trigger = {
            NOT = { event_target:lrsk_subject_to_charter = { has_country_flag = lrsk_charter_subject_same_species_as_ol } }
        }
        text = lrsk_gov_var_chartered.2.desc.a
    }
    desc = {
        trigger = {
            event_target:lrsk_subject_to_charter = { has_country_flag = lrsk_charter_subject_same_species_as_ol }
        }
        text = lrsk_gov_var_chartered.2.desc.b
    }

	is_triggered_only = yes

    immediate = {
        save_event_target_as = lrsk_chartering_agent
        owner_species = { save_event_target_as = lrsk_chartering_agent_species }
        from = { save_event_target_as = lrsk_subject_to_charter }

        log = "In chartered colony choice event. Overlord = [lrsk_chartering_agent.GetName], subject = [lrsk_subject_to_charter.GetName]"
    }

    # Not same species, home rule
    option = {
        name = lrsk_gov_var_chartered.2.a
        custom_tooltip = lrsk_gov_var_chartered.2.a.tooltip

        trigger = {
            NOT = { event_target:lrsk_subject_to_charter = { has_country_flag = lrsk_charter_subject_same_species_as_ol } }
        }

        allow = {
            OR = {
                NOT = { has_ethic = ethic_fanatic_xenophobe }
                from = { is_ai = no } # For an edge case: player vassalized by Fanatic Xenophobe chartering agent
            }
        }

        hidden_effect = {
            from  = {
                change_government = {
                    authority = auth_corporate
                    civics = {
                        civic = lrsk_gov_var_civic_mc_chartered_company
                        civic = random
                    }
                }
                set_name = random # Fixes some naming issues
                set_subject_of = {
                    who = event_target:lrsk_chartering_agent
                    subject_type = lrsk_gov_var_subject_chartered_company
                }
            }
            log = "Chartered colony created, native rule. Overlord = [lrsk_chartering_agent.GetName], subject = [lrsk_subject_to_charter.GetName]"
        }

        ai_chance = {
            factor = 100 # AI chartering corp should always turn its vassals into chartered colonies if possible.
			modifier = {
				add = 100
				has_ethic = ethic_egalitarian
                NOT = { has_ethic = ethic_xenophobe }
			}
			modifier = {
				add = 100
				has_ethic = ethic_xenophile
			}
			modifier = {
				add = -50
				has_ethic = ethic_authoritarian
			}
			modifier = {
				add = -50
				has_ethic = ethic_xenophobe
			}
        }
    }
    
    # Same species
    option = {
        name = lrsk_gov_var_chartered.2.b
        custom_tooltip = lrsk_gov_var_chartered.2.b.tooltip

        trigger = {
            event_target:lrsk_subject_to_charter = { has_country_flag = lrsk_charter_subject_same_species_as_ol }
        }

        hidden_effect = {
            from  = {
                change_government = {
                    authority = auth_corporate
                    civics = {
                        civic = lrsk_gov_var_civic_mc_chartered_company
                        civic = random
                    }
                }
                set_name = random # Fixes some naming issues
                set_subject_of = {
                    who = event_target:lrsk_chartering_agent
                    subject_type = lrsk_gov_var_subject_chartered_company
                }
            }
            log = "Chartered colony created, same species. Overlord = [lrsk_chartering_agent.GetName], subject = [lrsk_subject_to_charter.GetName]"
        }

        ai_chance = {
            factor = 100 # AI chartering corp should always turn its vassals into chartered colonies if possible.
        }
    }

    # Not same species, foreign rule
    option = {
        name = lrsk_gov_var_chartered.2.c
        custom_tooltip = lrsk_gov_var_chartered.2.c.tooltip

        # Checking for player status because we don't want this to be an instant game over for a player!
        trigger = {
            from = { is_ai = yes } # JIC
            NOT = { event_target:lrsk_subject_to_charter = { has_country_flag = lrsk_charter_subject_same_species_as_ol } }
        }

        allow = {
            NOT = { has_ethic = ethic_fanatic_xenophile }
            from = { is_ai = yes } # just in double case!!
        }

        hidden_effect = {
            create_country = {
                name_list = event_target:lrsk_chartering_agent
                species = event_target:lrsk_chartering_agent_species
                type = default
                origin = "lrsk_gov_var_origin_colonial_charter"
                ignore_initial_colony_error = yes
                day_zero_contact = no
                ethos = event_target:lrsk_chartering_agent
                authority = auth_corporate
                civics = {
                    civic = lrsk_gov_var_civic_mc_chartered_company
                    civic = random
                }
                effect = {
                    copy_techs_from = { target = event_target:lrsk_subject_to_charter }
                    save_event_target_as = lrsk_new_chartered_company
                    establish_communications_no_message = event_target:lrsk_chartering_agent
                }
            }
            event_target:lrsk_subject_to_charter = {
                every_owned_fleet = { set_owner = event_target:lrsk_new_chartered_company }
                every_owned_planet = {
                    set_owner = event_target:lrsk_new_chartered_company
                    set_controller = event_target:lrsk_new_chartered_company
                }
                every_system_within_border = {
                    limit = { exists = starbase }
                    starbase = {
                        set_owner = event_target:lrsk_new_chartered_company
                    }
                }
            }
            every_country = {
                limit = { has_communications = event_target:lrsk_subject_to_charter }
                establish_communications_no_message = event_target:lrsk_new_chartered_company
            }
            event_target:lrsk_new_chartered_company = {
                add_resource = {
                    minerals = 2000
                    energy = 2000
                    alloys = 750
                    consumer_goods = 750
                    food = 2000
                    influence = 200
                }
                every_planet_within_border = {
                    surveyed = {
                        set_surveyed = yes
                        surveyor = event_target:lrsk_new_chartered_company
                    }
                }
                create_starting_leaders = yes
                set_name = random # Fixes some naming issues
                set_subject_of = {
                    who = event_target:lrsk_chartering_agent
                    subject_type = lrsk_gov_var_subject_chartered_company
                }
            }
            event_target:lrsk_subject_to_charter = { destroy_country = yes }
            log = "Chartered colony created, alien rule. Overlord = [lrsk_chartering_agent.GetName], subject = [lrsk_subject_to_charter.GetName]"
        }

        ai_chance = {
            factor = 100 # AI chartering corp should always turn its vassals into chartered colonies if possible.
			modifier = {
				add = -50
				has_ethic = ethic_egalitarian
                NOT = { has_ethic = ethic_xenophobe }
			}
			modifier = {
				add = -50
				has_ethic = ethic_xenophile
			}
			modifier = {
				add = 100
				has_ethic = ethic_authoritarian
			}
			modifier = {
				add = 100
				has_ethic = ethic_xenophobe
			}
        }
    }

    # Leave be
    option = {
        name = lrsk_gov_var_chartered.2.d
        custom_tooltip = lrsk_gov_var_chartered.2.d.tooltip

        ai_chance = {
            factor = 0 # AI chartering corp should always turn its vassals into chartered colonies if possible.
        }
    }
}

# Calculate number of chartered colony subjects and apply appropriate trade bonus
country_event = {
	id = lrsk_gov_var_chartered.3

  	hide_window = yes
    is_triggered_only = yes

	trigger = {
        has_valid_civic = lrsk_gov_var_civic_mc_chart_corp_board
		any_subject = {
			is_subject_type = lrsk_gov_var_subject_chartered_company
		}
    }

    immediate = {
        # set a flag on every valid chartered company subject to mark it as "counted"
		every_subject = {
            limit = { is_subject_type = lrsk_gov_var_subject_chartered_company }
            set_country_flag = lrsk_counted_chartered_company_sub
        }
        set_variable = { which = lrsk_charcols value = 0 } # Technically this does nothing but eh explicitness...

        # check for each subject with the above flag, increment a counter and remove it
        while = {
            count = 15 #max bonus
            limit = { any_subject = {
                has_country_flag = lrsk_counted_chartered_company_sub
				is_subject_type = lrsk_gov_var_subject_chartered_company
            } }
            random_subject = {
                limit = { 
                    has_country_flag = lrsk_counted_chartered_company_sub
				    is_subject_type = lrsk_gov_var_subject_chartered_company
                }
                change_variable = { which = lrsk_charcols value = 1 }
                remove_country_flag = lrsk_counted_chartered_company_sub
            }
        }

        #remove previous
        switch = {
            trigger = has_modifier
            lrsk_gov_var_empire_colonial_trade_1 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_1 }
            lrsk_gov_var_empire_colonial_trade_2 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_2 }
            lrsk_gov_var_empire_colonial_trade_3 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_3 }
            lrsk_gov_var_empire_colonial_trade_4 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_4 }
            lrsk_gov_var_empire_colonial_trade_5 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_5 }
            lrsk_gov_var_empire_colonial_trade_6 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_6 }
            lrsk_gov_var_empire_colonial_trade_7 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_7 }
            lrsk_gov_var_empire_colonial_trade_8 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_8 }
            lrsk_gov_var_empire_colonial_trade_9 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_9 }
            lrsk_gov_var_empire_colonial_trade_10 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_10 }
            lrsk_gov_var_empire_colonial_trade_11 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_11 }
            lrsk_gov_var_empire_colonial_trade_12 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_12 }
            lrsk_gov_var_empire_colonial_trade_13 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_13 }
            lrsk_gov_var_empire_colonial_trade_14 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_14 }
            lrsk_gov_var_empire_colonial_trade_15 = { remove_modifier = lrsk_gov_var_empire_colonial_trade_15 }
        }

        #add new
        IF = { limit = { check_variable = { which = lrsk_charcols value = 1 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_1 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 2 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_2 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 3 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_3 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 4 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_4 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 5 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_5 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 6 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_6 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 7 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_7 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 8 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_8 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 9 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_9 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 10 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_10 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 11 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_11 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 12 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_12 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 13 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_13 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value = 14 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_14 } }
        ELSE_IF = { limit = { check_variable = { which = lrsk_charcols value >= 15 } } add_modifier = { modifier = lrsk_gov_var_empire_colonial_trade_15 } }
        
        if = {
            limit = { NOR = { 
                has_country_flag = lrsk_chartered_no_trade_notice
                has_country_flag = lrsk_chartered_trade_notice_cooldown
             } }
            country_event = { id = lrsk_gov_var_chartered.4 }
        }
    }
}

# Notify about newly applied bonus
country_event = {
	id = lrsk_gov_var_chartered.4
	title = lrsk_gov_var_chartered.4.name
	desc = lrsk_gov_var_chartered.4.desc
	picture = GFX_lrsk_financial_instruments

    is_triggered_only = yes

    option = {
        name = lrsk_gov_var_chartered.4.a
        custom_tooltip = lrsk_gov_var_chartered.4.a.tooltip

        hidden_effect = {
            # 6 month notification cooldown
            set_timed_country_flag = {
                flag = lrsk_chartered_trade_notice_cooldown
                days = 180
            }
        }

        ai_chance = {
            factor = 0 # meh
        }
    }

    option = {
        name = lrsk_gov_var_chartered.4.b
        custom_tooltip = lrsk_gov_var_chartered.4.b.tooltip

        hidden_effect = {
            set_country_flag = lrsk_chartered_no_trade_notice
        }

        ai_chance = {
            factor = 1 # meh
        }
    }
}

# Housekeeing (Monthly):
# Calculate trade value bonus
# If an AI empire has charted company civic, and is not a subject to anyone, upgrade to chartering board civic.
country_event = {
	id = lrsk_gov_var_chartered.1000

  	hide_window = yes
    is_triggered_only = yes

    trigger = {
        OR ={
            has_valid_civic = lrsk_gov_var_civic_mc_chart_corp_board
            has_valid_civic = lrsk_gov_var_civic_mc_chartered_company
        }
    }

    immediate = {
        IF = { limit = { has_valid_civic = lrsk_gov_var_civic_mc_chart_corp_board }
            # Calculate trade value bonus
            IF = { limit = {  any_subject = { is_subject_type = lrsk_gov_var_subject_chartered_company } }
                country_event = {
                    id = lrsk_gov_var_chartered.3
                    days = 3                        # delay to not interfere with application of bonuses.
                }
            }
        }
        IF = { limit = { has_valid_civic = lrsk_gov_var_civic_mc_chartered_company }
            # If no overlord, promote civic (as athos appropriate)
            IF = {
                limit = {
                    is_subject = no
                    NOR = {
                        has_ethic = ethic_egalitarian
                        has_ethic = ethic_fanatic_egalitarian
                        has_ethic = ethic_pacifist
                        has_ethic = ethic_fanatic_pacifist
                    }
                }
                change_government = {
                    civics = {
                        civic = lrsk_gov_var_civic_mc_chart_corp_board
                        civic = random
                    }
                }
            }
        }
    }
}
