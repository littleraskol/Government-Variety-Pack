# Government Variety Pack
# Events - Automated Indolence Events
# Author: littleraskol

namespace = lrsk_gvp_autoindol

# Setup starting tech, buildings, variables
country_event = {
	id = lrsk_gvp_autoindol.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_valid_civic = lrsk_gov_var_civic_automated_indolence
	}
	
	immediate = {
		give_technology = { tech = tech_administrative_ai message = no }

		set_variable = { which = lrsk_ai_techs value = 0 }
		set_variable = { which = lrsk_robo_techs value = 0 }
		set_variable = { which = lrsk_autoadmin_techs value = 0 }

		# Super dumb kludge to deal with upkeep shortage
		#add_resource = {
		#	rare_crystals = @lrsk_autoindolcenter2_rare_upkeep
		#}
		
		capital_scope = {
			set_planet_flag = lrsk_gvp_autoindol_capital

			add_deposit = d_lrsk_gvp_legacy_autoinf
			add_building = lrsk_gvp_bldg_autoindolcenter_2
			add_building = lrsk_gvp_bldg_autoindolfunplex_1
			#repair_all_buildings = yes	# kludge because funlex sometimes starts ruined?
		}

		every_owned_pop = {
			limit = { is_organic_species = yes }
			set_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop
		}

		# Some effects of this civic require fairly expensive queries; we set this to check for it elsewhere and avoid these queries if unset.
		IF = { limit = { NOT = { has_global_flag = lrsk_gvp_automated_indolence_empire_created } }
			set_global_flag = lrsk_gvp_automated_indolence_empire_created
		}

		# Semi-immediate check that some other mod did not remove the special deposit
		country_event = {
			id = lrsk_government_variety_pack_backend.2
			days = 2
		}
	}
}

# Check is relevant tech researched
country_event = {
	id = lrsk_gvp_autoindol.2
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_valid_civic = lrsk_gov_var_civic_automated_indolence
	}
	
	immediate = {
		IF = { limit = { last_increased_tech = tech_pd_tracking_3 } change_variable = { which = lrsk_ai_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_sapient_ai } change_variable = { which = lrsk_ai_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_combat_computers_3 } change_variable = { which = lrsk_ai_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_cryostasis_2 } change_variable = { which = lrsk_ai_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_consumer_good_refinement_2 } change_variable = { which = lrsk_ai_techs value = 1 } }
		
		IF = { limit = { last_increased_tech = tech_droid_workers } change_variable = { which = lrsk_robo_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_synthetic_workers } change_variable = { which = lrsk_robo_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_synthetic_leaders } change_variable = { which = lrsk_robo_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_robomodding_points_1 } change_variable = { which = lrsk_robo_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_robomodding } change_variable = { which = lrsk_robo_techs value = 1 } }
		
		IF = { limit = { last_increased_tech = tech_effective_bureaucracy } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_interstellar_economics } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_hypercomms_forum } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_collective_self } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_paradise_dome } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
	}
}

# Add AutoIndol flags to pops as appropriate
# This = Planet scope
# From = Country
# FromFrom = Pop
planet_event = {
	id = lrsk_gvp_autoindol.3
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { has_valid_civic = lrsk_gov_var_civic_automated_indolence }
		NOT = { has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM }
		FROMFROM = { is_organic_species = yes }
	}
	
	immediate = {
		IF = { limit = { lrsk_gvp_autoindol_has_auto_infra = yes }
			FROMFROM = { set_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop } 
		}
		ELSE_IF = { limit = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy }
			FROMFROM = { set_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop }
		}
	}
}

# Set a flag for 6 years to prevent AutoIndo modifiers/flags (planet and pops) for 6 years
# This = Planet scope
# From = Country scope (new owner)
# FromFrom = Country scope (previous owner, if any)
planet_event = {
	id = lrsk_gvp_autoindol.4
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { has_valid_civic = lrsk_gov_var_civic_automated_indolence }
		FROMFROM = { NOT = { has_valid_civic = lrsk_gov_var_civic_automated_indolence } }
	}
	
	immediate = {
		IF = { limit = { has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM }
			remove_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM
		}
		
		set_timed_planet_flag = {
			flag = lrsk_gvp_autoindol_recently_gained_by@FROM
			days = 2160
		}
	}
}

# Governs AutoIndo modifiers/flags (planet and pops) based on conditions
planet_event = {
	id = lrsk_gvp_autoindol.5
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		# Set whenever any empire spawns with this civic; resolving false spares us having to check anything else
		has_global_flag = lrsk_gvp_automated_indolence_empire_created

		# Don't do any of this on a recently gained world or if there's some other hold
		NOR = {
			has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@owner
			has_planet_flag = lrsk_autoindol_reeval_hold
		}

		OR = {			
			# Deal with cases within AutoIndol empire
			owner = { has_civic = lrsk_gov_var_civic_automated_indolence }
			
			# There are things to do if these planet modifiers are present regardless of where
			OR = {
				has_modifier = lrsk_gvp_autoindol_haughty_autonomy
				has_modifier = lrsk_gvp_autoindol_accustomed_languor
			}
		}
	}
	
	immediate = {		
		IF = { limit = { owner = { has_valid_civic = lrsk_gov_var_civic_automated_indolence } }			
			IF = { limit = { lrsk_gvp_autoindol_has_auto_infra = yes }

				# Add AL to planet
				lrsk_set_modifier = { MOD = lrsk_gvp_autoindol_accustomed_languor }

				# Chance of shifting at each step: 60% none -> AL, 40% HA -> none
				every_owned_pop = {
					limit = {
						NOR = {
							has_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop
							has_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop
						}
					}
					random = {
						chance = 60
						set_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop
					}
				}
				every_owned_pop = { limit = { has_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop }
					random = {
						chance = 40
						remove_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop
					}
				}
				
				IF = { limit = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy }
					# Remove HA from planet
					remove_modifier = lrsk_gvp_autoindol_haughty_autonomy
					
					IF = { limit = { NOT = { owner = { has_country_flag = lrsk_gvp_autoindol_ignore_loseHA } } }
						planet_event = { id = lrsk_gvp_autoindol.52 }
					}
				}
			}			
			ELSE_IF = { limit = { NOT = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy } }

				# Add HA to planet
				add_modifier = { modifier = lrsk_gvp_autoindol_haughty_autonomy }

				# Should lose AL at this point
				erase_modifier = { MOD = lrsk_gvp_autoindol_accustomed_languor }
				
				IF = { limit = { NOT = { owner = { has_country_flag = lrsk_gvp_autoindol_ignore_getHA } } }
					planet_event = { id = lrsk_gvp_autoindol.51 }
				}
			}

			IF = { limit = { NOT = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy } }
				# Chance of shifting at each step: 40% none -> HA, 60% AL -> none
				every_owned_pop = {
					limit = {
						NOR = {
							has_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop
							has_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop
						}
					}
					random = {
						chance = 40
						set_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop
					}
				}
				every_owned_pop = { limit = { has_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop }
					random = {
						chance = 60
						remove_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop
					}
				}
			}
			
			# Unsure how any pop would get both, but remove jic...
			every_owned_pop = {
				limit = {
					has_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop
					has_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop
				}
				remove_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop
				remove_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop
			}
		}
		ELSE = {
			# Should not be in effect outside AutoIndol empire after a time
			erase_modifier = { MOD = lrsk_gvp_autoindol_haughty_autonomy }
			erase_modifier = { MOD = lrsk_gvp_autoindol_accustomed_languor }
		}
		
		# Outside AutoIndol empire, 80% chance either gets removed
		# DEPRECATED: no longer matters what happens to these pops in this case, just a flag
		# 	This is much less expensive for the game
		#IF = { limit = { NOT = { owner = { has_civic = lrsk_gov_var_civic_automated_indolence } } }
		#	every_owned_pop = { limit = { has_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop }
		#		random = {
		#			chance = 80
		#			remove_pop_flag = lrsk_gvp_autoindol_accustomed_languor_pop
		#			set_timed_pop_flag = { flag = lrsk_autogvp_mod_checked@root days = 3 }
		#		}
		#	}
		#	every_owned_pop = { limit = { has_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop }
		#		random = {
		#			chance = 80
		#			remove_pop_flag = lrsk_gvp_autoindol_haughty_autonomy_pop
		#			set_timed_pop_flag = { flag = lrsk_autogvp_mod_checked@root days = 3 }
		#		}
		#	}
		#}
	}
}

# Inform player of Haughty Autonomy
planet_event = {
	id = lrsk_gvp_autoindol.51
	title = lrsk_gvp_autoindol.51.name
	desc = lrsk_gvp_autoindol.51.desc
	picture = GFX_evt_civil_action

  	is_triggered_only = yes
	location = this
	
	option = {
		name = lrsk_gvp_autoindol.51.a
		custom_tooltip = lrsk_gvp_autoindol.51.a.tooltip
	}
	
	option = {
		name = lrsk_gvp_autoindol.51.b
		custom_tooltip = lrsk_gvp_autoindol.51.b.tooltip

		hidden_effect = {
			owner = { set_country_flag = lrsk_gvp_autoindol_ignore_getHA }
		}
	}
}

# Inform player of return of Accustomed Languor/loss of Haughty Autonomy
planet_event = {
	id = lrsk_gvp_autoindol.52
	title = lrsk_gvp_autoindol.52.name
	desc = lrsk_gvp_autoindol.52.desc
	picture = GFX_evt_galactic_community

  	is_triggered_only = yes
	location = this
	
	option = {
		name = lrsk_gvp_autoindol.52.a
		custom_tooltip = lrsk_gvp_autoindol.52.a.tooltip
	}
	
	option = {
		name = lrsk_gvp_autoindol.52.b
		custom_tooltip = lrsk_gvp_autoindol.52.b.tooltip

		hidden_effect = {
			owner = { set_country_flag = lrsk_gvp_autoindol_ignore_loseHA }
		}
	}
}