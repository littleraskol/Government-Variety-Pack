# Government Variety Pack
# Events - Automated Indolence Events
# Author: littleraskol

namespace = lrsk_gvp_autoindol

# Setup starting tech, buildings, variables
country_event = {
	id = lrsk_gvp_autoindol.startup
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_valid_civic = lrsk_gov_var_civic_automated_indolence
	}
	
	immediate = {
		give_technology = { tech = tech_administrative_ai message = no }

		set_variable = { which = lrsk_ai_techs value = 0 }
		set_variable = { which = lrsk_robo_techs value = 0 }
		set_variable = { which = lrsk_autoadmin_techs value = 0 }
		
		capital_scope = {
			add_building = lrsk_gvp_bldg_autoindolcenter_2
			add_building = lrsk_gvp_bldg_autoindolfunplex_1
			repair_all_buildings = yes	# kludge because funlex sometimes starts ruined?
		}

		every_owned_pop = {
			limit = { is_organic_species = yes }
			add_modifier = { modifier = lrsk_gvp_autoindol_accustomed_languor }
		}

		# Some effects of this civic require fairly expensive queries; we set this to check for it elsewhere and avoid these queries if unset.
		IF = { limit = { NOT = { has_global_flag = lrsk_gvp_automated_indolence_empire_created } }
			set_global_flag = lrsk_gvp_automated_indolence_empire_created
		}
	}
}

# Check is relevant tech researched
country_event = {
	id = lrsk_gvp_autoindol.techup
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_valid_civic = lrsk_gov_var_civic_automated_indolence
	}
	
	immediate = {
		IF = { limit = { last_increased_tech = tech_pd_tracking_3 } change_variable = { which = lrsk_ai_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_sapient_ai } change_variable = { which = lrsk_ai_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_combat_computers_3 } change_variable = { which = lrsk_ai_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_cryostasis_2 } change_variable = { which = lrsk_ai_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_consumer_good_refinement_2 } change_variable = { which = lrsk_ai_techs value = 1 } }
		
		IF = { limit = { last_increased_tech = tech_droid_workers } change_variable = { which = lrsk_robo_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_synthetic_workers } change_variable = { which = lrsk_robo_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_synthetic_leaders } change_variable = { which = lrsk_robo_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_robomodding_points_1 } change_variable = { which = lrsk_robo_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_robomodding } change_variable = { which = lrsk_robo_techs value = 1 } }
		
		IF = { limit = { last_increased_tech = tech_effective_bureaucracy } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_interstellar_economics } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_hypercomms_forum } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_collective_self } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		IF = { limit = { last_increased_tech = tech_paradise_dome } change_variable = { which = lrsk_autoadmin_techs value = 1 } }
	}
}

# Add AutoIndol modifiers to pops as appropriate
# This = Planet scope
# From = Country
# FromFrom = Pop
planet_event = {
	id = lrsk_gvp_autoindol.popgrow
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { has_valid_civic = lrsk_gov_var_civic_automated_indolence }
		NOT = { has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM }
		FROMFROM = { is_organic_species = yes }
	}
	
	immediate = {
		IF = { limit = { lrsk_gvp_autoindol_has_auto_infra = yes }
			FROMFROM = { add_modifier = { modifier = lrsk_gvp_autoindol_accustomed_languor } } 
		}
		ELSE_IF = { limit = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy }
			FROMFROM = { add_modifier = { modifier = lrsk_gvp_autoindol_haughty_autonomy_pop } }
		}
	}
}

# Governs AutoIndo modifiers (planet and pops) based on conditions
planet_event = {
	id = lrsk_gvp_autoindol.planetpophousekeeping
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			# Set whenever any empire spawns with this civic; resolving false spares us having to check anything else
			has_global_flag = lrsk_gvp_automated_indolence_empire_created
			
			# Deal with cases within AutoIndol empire
			owner = { has_civic = lrsk_gov_var_civic_automated_indolence }

			# Don't do any of this on a recently gained world
			NOT = { has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@owner }
			
			# There are things to do if this planet modifier is present
			has_modifier = lrsk_gvp_autoindol_haughty_autonomy
			
			# Deal with cases anywhere with pops having the appropriate modifiers
			any_owned_pop = {
				OR = {
					has_modifier = lrsk_gvp_autoindol_accustomed_languor
					has_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop
				}
			}
		}
	}
	
	immediate = {		
		# Deal with planet modifier first - impacts pop modifiers
		IF = { limit = { owner = { has_valid_civic = lrsk_gov_var_civic_automated_indolence } }	
			IF = {
				limit = { AND = {
					lrsk_gvp_autoindol_has_auto_infra = yes
					has_modifier = lrsk_gvp_autoindol_haughty_autonomy
				} }
				# Remove HA from planet
				remove_modifier = lrsk_gvp_autoindol_haughty_autonomy
				
				IF = { limit = { NOT = { owner = { has_country_flag = lrsk_gvp_autoindol_ignore_loseHA } } }
					planet_event = { id = lrsk_gvp_autoindol.loseHA }
				}
			}
			
			ELSE_IF = {
				limit = { AND = {
					lrsk_gvp_autoindol_has_auto_infra = no
					NOT = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy }
				} }
				# Add HA to planet
				add_modifier = { modifier = lrsk_gvp_autoindol_haughty_autonomy }
				
				IF = { limit = { NOT = { owner = { has_country_flag = lrsk_gvp_autoindol_ignore_getHA } } }
					planet_event = { id = lrsk_gvp_autoindol.getHA }
				}
			}
		}
		ELSE_IF = { limit = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy }
			# Should not be in effect outside AutoIndol empire
			remove_modifier = lrsk_gvp_autoindol_haughty_autonomy
		}
		
		# Outside AutoIndol empire, 80% chance either gets removed
		IF = { limit = { NOT = { owner = { has_civic = lrsk_gov_var_civic_automated_indolence } } }
			every_owned_pop = { limit = { has_modifier = lrsk_gvp_autoindol_accustomed_languor }
				random = {
					chance = 80
					remove_modifier = lrsk_gvp_autoindol_accustomed_languor
					set_timed_pop_flag = { flag = lrsk_autogvp_mod_checked@root days = 3 }
				}
			}
			every_owned_pop = { limit = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop }
				random = {
					chance = 80
					remove_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop
					set_timed_pop_flag = { flag = lrsk_autogvp_mod_checked@root days = 3 }
				}
			}
		}
		# Deal with shifts based on automation infrastructure presence/absence
		ELSE_IF = { limit = { lrsk_gvp_autoindol_has_auto_infra = yes }
			# Chance of shifting at each step: 60% none -> AL, 40% HA -> none
			every_owned_pop = {
				limit = {
					NOR = {
						has_modifier = lrsk_gvp_autoindol_accustomed_languor
						has_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop
					}
				}
				random = {
					chance = 60
					add_modifier = { modifier = lrsk_gvp_autoindol_accustomed_languor }
				}
			}
			every_owned_pop = { limit = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop }
				random = {
					chance = 40
					remove_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop
				}
			}
		}
		ELSE_IF = { limit = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy }
			# Chance of shifting at each step: 40% none -> HA, 60% AL -> none
			every_owned_pop = {
				limit = {
					NOR = {
						has_modifier = lrsk_gvp_autoindol_accustomed_languor
						has_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop
					}
				}
				random = {
					chance = 40
					add_modifier = { modifier = lrsk_gvp_autoindol_haughty_autonomy_pop }
				}
			}
			every_owned_pop = { limit = { has_modifier = lrsk_gvp_autoindol_accustomed_languor }
				random = {
					chance = 60
					remove_modifier = lrsk_gvp_autoindol_accustomed_languor
				}
			}
		}
		
		# Unsure how any pop would get both, but remove jic...
		every_owned_pop = {
			limit = {
				has_modifier = lrsk_gvp_autoindol_accustomed_languor
				has_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop
			}
			remove_modifier = lrsk_gvp_autoindol_accustomed_languor
			remove_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop
		}
	}
}

# Set a flag for 15 years to stop pops from gaining AutoIndol modifiers
# This = Planet scope
# From = Country scope (new owner)
# FromFrom = Country scope (previous owner, if any)
planet_event = {
	id = lrsk_gvp_autoindol.gainedplanet
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { has_valid_civic = lrsk_gov_var_civic_automated_indolence }
	}
	
	immediate = {
		IF = { limit = { has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM }
			remove_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM
		}
		
		set_timed_planet_flag = {
			flag = lrsk_gvp_autoindol_recently_gained_by@FROM
			days = 5400
		}
	}
}

# Inform player of Haughty Autonomy
planet_event = {
	id = lrsk_gvp_autoindol.getHA
	title = lrsk_gvp_autoindol.getHA.name
	desc = lrsk_gvp_autoindol.getHA.desc
	picture = GFX_evt_civil_action

  	is_triggered_only = yes
	location = this
	
	option = {
		name = lrsk_gvp_autoindol.getHA.a
		custom_tooltip = lrsk_gvp_autoindol.getHA.a.tooltip
	}
	
	option = {
		name = lrsk_gvp_autoindol.getHA.b
		custom_tooltip = lrsk_gvp_autoindol.getHA.b.tooltip

		hidden_effect = {
			owner = { set_country_flag = lrsk_gvp_autoindol_ignore_getHA }
		}
	}
}

# Inform player of return of Accustomed Languor/loss of Haughty Autonomy
planet_event = {
	id = lrsk_gvp_autoindol.loseHA
	title = lrsk_gvp_autoindol.loseHA.name
	desc = lrsk_gvp_autoindol.loseHA.desc
	picture = GFX_evt_galactic_community

  	is_triggered_only = yes
	location = this
	
	option = {
		name = lrsk_gvp_autoindol.loseHA.a
		custom_tooltip = lrsk_gvp_autoindol.loseHA.a.tooltip
	}
	
	option = {
		name = lrsk_gvp_autoindol.loseHA.b
		custom_tooltip = lrsk_gvp_autoindol.loseHA.b.tooltip

		hidden_effect = {
			owner = { set_country_flag = lrsk_gvp_autoindol_ignore_loseHA }
		}
	}
}