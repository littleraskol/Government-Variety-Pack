# Government Variety Pack
# Events - Automated Indolence Events
# Author: littleraskol

namespace = lrsk_gvp_autoindol

# Setup starting tech, buildings, variables
country_event = {
	id = lrsk_gvp_autoindol.startup
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_valid_civic = lrsk_gov_var_civic_automated_indolence
	}
	
	immediate = {
		give_technology = { tech = tech_administrative_ai message = no }

		set_variable = { which = lrsk_ai_techs value = 0 }
		set_variable = { which = lrsk_robo_techs value = 0 }
		set_variable = { which = lrsk_autoadmin_techs value = 0 }
		
		capital_scope = {
			add_building = lrsk_gvp_bldg_autoindolcenter_2
			add_building = lrsk_gvp_bldg_autoindolfunplex_1
		}

		# Some effects of this civic require fairly expensive queries; we set this to check for it elsewhere and avoid these queries if unset.
		IF = { limit = { NOT = { has_global_flag = lrsk_gvp_automated_indolence_empire_created } }
			set_global_flag = lrsk_gvp_automated_indolence_empire_created
		}
	}
}

# Check is relevant tech researched
country_event = {
	id = lrsk_gvp_autoindol.techup
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_valid_civic = lrsk_gov_var_civic_automated_indolence
	}
	
	immediate = {
		switch = {
			trigger = last_increased_tech
			tech_pd_tracking_3 = { change_variable = { which = lrsk_ai_techs value = 1 } }
			tech_sapient_ai = { change_variable = { which = lrsk_ai_techs value = 1 } }
			tech_combat_computers_3 = { change_variable = { which = lrsk_ai_techs value = 1 } }
			tech_cryostasis_2 = { change_variable = { which = lrsk_ai_techs value = 1 } }
			tech_consumer_good_refinement_2 = { change_variable = { which = lrsk_ai_techs value = 1 } }
			tech_droid_workers = { change_variable = { which = lrsk_robo_techs value = 1 } }
			tech_synthetic_workers = { change_variable = { which = lrsk_robo_techs value = 1 } }
			tech_synthetic_leaders = { change_variable = { which = lrsk_robo_techs value = 1 } }
			tech_robomodding_points_1 = { change_variable = { which = lrsk_robo_techs value = 1 } }
			tech_robomodding = { change_variable = { which = lrsk_robo_techs value = 1 } }
			tech_effective_bureaucracy = { change_variable = { which = lrsk_autoadmin_techs value = 1 } }
			tech_interstellar_economics = { change_variable = { which = lrsk_autoadmin_techs value = 1 } }
			tech_hypercomms_forum = { change_variable = { which = lrsk_autoadmin_techs value = 1 } }
			tech_collective_self = { change_variable = { which = lrsk_autoadmin_techs value = 1 } }
			tech_paradise_dome = { change_variable = { which = lrsk_autoadmin_techs value = 1 } }
		}
	}
}

# Add AutoIndol modifiers to pops as appropriate
# This = Planet scope
# From = Country
# FromFrom = Pop
planet_event = {
	id = lrsk_gvp_autoindol.popgrow
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { has_valid_civic = lrsk_gov_var_civic_automated_indolence }
		NOT = { has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM }
	}
	
	immediate = {
		IF = { limit = { lrsk_gvp_autoindol_has_auto_infra = yes }
			FROMFROM = { add_modifier = { modifier = lrsk_gvp_autoindol_accustomed_languor } } 
		}
		ELSE_IF = { limit = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy }
			FROMFROM = { add_modifier = { modifier = lrsk_gvp_autoindol_haughty_autonomy_pop } }
		}
	}
}

# Governs AutoIndo modifiers (planet and pops) based on conditions
planet_event = {
	id = lrsk_gvp_autoindol.planetpophousekeeping
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			# Set whenever any empire has this civic; resolving false spares us having to check anything else
			has_global_flag = lrsk_gvp_automated_indolence_empire_created
			
			# Deal with cases within AutoIndol empire
			owner = { has_civic = lrsk_gov_var_civic_automated_indolence }

			# Don't do any of this on a recently gained world
			NOT = { has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@owner }
			
			# Deal with cases anywhere with pops having the appropriate modifiers
			any_owned_pop = {
				OR = {
					has_modifier = lrsk_gvp_autoindol_accustomed_languor
					has_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop
				}
			}
		}
	}
	
	immediate = {
		set_variable = { which = lrsk_languor_pops value = 0 }
		export_trigger_value_to_variable = {
			trigger = count_owned_pop
			parameters = { has_modifier = lrsk_gvp_autoindol_accustomed_languor }
			variable = lrsk_languor_pops
		}
		
		set_variable = { which = lrsk_haughty_pops value = 0 }
		export_trigger_value_to_variable = {
			trigger = count_owned_pop
			parameters = { has_modifier = lrsk_gvp_autoindol_haughty_autonomy_pop }
			variable = lrsk_haughty_pops
		}
		
		IF = { limit = { owner = { has_valid_civic = lrsk_gov_var_civic_automated_indolence } }
			# AutoIndo empire stuff: adding/removing Haughty Autonomy as needed
		}
		
		IF = { limit = { check_variable = { which = lrsk_languor_pops value > 0 } }
			# See if they should still have this modifier if e.g., they left the AutoIndol empire
		}
		
		IF = { limit = { check_variable = { which = lrsk_haughty_pops value > 0 } }
			# See if they should still have this modifier if e.g., they left the AutoIndol empire
		}
	}
}

# Set a flag for 15 years to stop pops from gaining AutoIndol modifiers
# This = Planet scope
# From = Country scope (new owner)
# FromFrom = Country scope (previous owner, if any)
planet_event = {
	id = lrsk_gvp_autoindol.gainedplanet
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { has_valid_civic = lrsk_gov_var_civic_automated_indolence }
	}
	
	immediate = {
		IF = { limit = { has_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM }
			remove_planet_flag = lrsk_gvp_autoindol_recently_gained_by@FROM
		}
		
		set_timed_planet_flag = {
			flag = lrsk_gvp_autoindol_recently_gained_by@FROM
			days = 5400
		}
	}
}
