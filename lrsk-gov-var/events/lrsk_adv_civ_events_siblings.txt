# New Advanced Civics
# Events - Siblings
# Spawns sibling empire.
# Author: littleraskol

namespace = lrsk_adv_civ_siblings

# Create the sibling
country_event = {
	id = lrsk_adv_civ_siblings.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_safety_lock } # Always false, comment out to activate these events.
		
		has_origin = lrsk_adv_civ_origin_star_siblings
		NOT = { has_country_flag = lrsk_adv_civ_created_sibling }
	}

	immediate = {

		this = {
			save_event_target_as = lrsk_adv_civ_needs_sibling
			set_country_flag = lrsk_adv_civ_initial_sibling
		}

		create_species = {
			name = random
			class = random_non_machine
			portrait = random
			traits = random
		}
		last_created_species = {
			save_event_target_as = lrsk_adv_civ_sibling_species
		}

		create_country = {
			name_list = random
			type = default
			origin = origin_default
			ethos = event_target:lrsk_adv_civ_needs_sibling
			authority = random
			civics = random
			species = event_target:lrsk_adv_civ_sibling_species
			flag = random
			day_zero_contact = no
			ignore_initial_colony_error = yes
			effect = {
				establish_communications_no_message = event_target:lrsk_adv_civ_needs_sibling
				save_event_target_as = lrsk_adv_civ_sibling_empire
			}
		}

		# Find valid home system
		capital_scope = { solar_system = { closest_system = {
			limit = {
				has_owner = no
				NOR = {
					any_system_planet = { is_colony = yes }
					any_system_planet = { is_capital = yes }
					any_system_planet = { is_ringworld = yes }
					has_star_flag = empire_cluster
					has_star_flag = hostile_system
					any_neighbor_system = {
						has_owner = yes
						has_star_flag = empire_cluster
					}
				}
				any_system_planet = {					
					is_asteroid = no
					is_star = no
					is_moon = no
				}
			}
			min_steps = 5
			
			save_event_target_as = lrsk_adv_civ_sibling_star
		} } }

		# Fallback with fewer restrictions if above fails...
		IF = { limit = { NOT = { exists = event_target:lrsk_adv_civ_sibling_star } }
			capital_scope = { solar_system = { closest_system = {
				limit = {
					has_owner = no
					NOR = {
						any_system_planet = { is_colony = yes }
						any_system_planet = { is_capital = yes }
						any_system_planet = { is_ringworld = yes }
						has_star_flag = empire_cluster
						has_star_flag = hostile_system
					}
					any_system_planet = {
						is_asteroid = no
						is_star = no
						is_moon = no
					}
				}
				min_steps = 2
				
				save_event_target_as = lrsk_adv_civ_sibling_star
			} } }
		}

		last_created_country = {
			set_country_flag = lrsk_adv_civ_created_sibling

			event_target:lrsk_adv_civ_sibling_star = {
				set_owner = event_target:lrsk_adv_civ_sibling_empire
				random_system_planet = {
					limit = {
						is_asteroid = no
						is_star = no
						is_moon = no
					}
					save_event_target_as = lrsk_adv_civ_sibling_capital
					set_planet_size = 16
					random_list = {
						1 = { change_pc = pc_tropical }
						1 = { change_pc = pc_arid }
						1 = { change_pc = pc_continental }
						1 = { change_pc = pc_ocean }
						1 = { change_pc = pc_tundra }
						1 = { change_pc = pc_arctic }
						1 = { change_pc = pc_alpine }
						1 = { change_pc = pc_savannah }
						1 = { change_pc = pc_desert }
					}
					reroll_planet = yes
					set_owner = event_target:lrsk_adv_civ_sibling_empire
					set_capital = yes
				}
			}

			modify_species = {
				species = event_target:lrsk_adv_civ_sibling_species
				homeworld = event_target:lrsk_adv_civ_sibling_capital
				ideal_planet_class = event_target:lrsk_adv_civ_sibling_capital
			}

			set_name = random # Fixes some naming issues

			#Set buddy status
			set_relation_flag = {
				who = event_target:lrsk_adv_civ_needs_sibling
				flag = lrsk_adv_civ_our_siblings
			}
			add_opinion_modifier = {
				who = event_target:lrsk_adv_civ_needs_sibling
				modifier = lrsk_adv_civ_star_siblings
			}

			# Starting resources
			add_energy = 100
			add_minerals = 200
			add_food = 100
			add_influence = 100

			create_starting_leaders = yes
			country_event = { id = game_start.9 }
			country_event = { id = game_start.33 days = 1 } # needs delay for system ownership to settle
		}

		# Need to set up starting buildings and population
		event_target:lrsk_adv_civ_sibling_capital = {
			create_colony = {
				owner = event_target:lrsk_adv_civ_sibling_empire
			}
			generate_start_deposits_and_blockers = yes
			generate_start_buildings_and_districts = yes
			generate_start_pops = yes
			solar_system = {
				create_starbase = {
					size = starbase_starport
					module = shipyard
					building = crew_quarters
					owner = event_target:lrsk_adv_civ_sibling_empire
					effect = {
						set_starbase_module = {
							slot = 1
							module = trading_hub
						}
					}
				}
			}
		}

		# Reciprocal buddy status
		set_relation_flag = {
			who = event_target:lrsk_adv_civ_sibling_empire
			flag = lrsk_adv_civ_our_siblings
		}
		add_opinion_modifier = {
			who = event_target:lrsk_adv_civ_sibling_empire
			modifier = lrsk_adv_civ_star_siblings
		}
	}
}

# First contact with sibling gate
ship_event = {
	id = lrsk_adv_civ_siblings.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_safety_lock } # Always false, comment out to activate these events.

		from = { exists = space_owner } # Actually an owned system
		from = { owner = { NOT = { is_same_value = root.owner } } } # Owner of system != owner of ship

		# filtering out non-valid empires makes this quicker to resolve.
		OR = {
			owner = { has_origin = lrsk_adv_civ_origin_star_siblings }
			from = { owner = { has_origin = lrsk_adv_civ_origin_star_siblings } }
		}
		NOR = {
			owner = { has_country_flag = lrsk_adv_civ_siblings_visit_complete }
			from = { owner = { has_country_flag = lrsk_adv_civ_siblings_visit_complete } }
		}
		
		#Check buddy status
		OR = {
			owner = { has_relation_flag = {
				who = from.owner
				flag = lrsk_adv_civ_our_siblings
			} }
			from = { owner = { has_relation_flag = {
				who = root.owner
				flag = lrsk_adv_civ_our_siblings
			} } }
		}
	}

	immediate = {
		from = { owner = { country_event = { id = lrsk_adv_civ_siblings.3 } } }
		owner = { country_event = { id = lrsk_adv_civ_siblings.4 } }
	}
}

# Host event
country_event = {
	id = lrsk_adv_civ_siblings.3
	title = lrsk_adv_civ_siblings.3.name
	desc = lrsk_adv_civ_siblings.3.desc
	picture = GFX_evt_fleet_good
	show_sound = event_celebration
	location = from
	is_triggered_only = yes

	immediate = {
		add_modifier = { modifier = lrsk_adv_civ_siblings_meeting days = 7200 }
		set_country_flag = lrsk_adv_civ_siblings_visit_complete
	}

	option = {
		name = LRSK_ADV_CIV_EVENT_SIBLINGS_WELCOME
		add_influence = 100
	}
}

# Guest event
country_event = {
	id = lrsk_adv_civ_siblings.4
	title = lrsk_adv_civ_siblings.4.name
	desc = lrsk_adv_civ_siblings.4.desc
	picture = GFX_evt_news_room
	show_sound = event_celebration
	location = from
	is_triggered_only = yes

	immediate = {
		add_modifier = { modifier = lrsk_adv_civ_siblings_meeting days = 7200 }
		set_country_flag = lrsk_adv_civ_siblings_visit_complete
	}

	option = {
		name = LRSK_ADV_CIV_EVENT_SIBLINGS_JOY
		add_influence = 100
	}
}

#Battle events:
# This = owner of fleet 1 (attacker?)
# From = owner of fleet 2 (defender?)
# FromFrom = fleet 1
# FromFromFrom = fleet 2

# Battle event gate
country_event = {
	id = lrsk_adv_civ_siblings.5
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_safety_lock } # Always false, comment out to activate these events.
		
		# We only want this to trigger when a combatant who is a sibling enters battle.
		OR = {
			this = { has_origin = lrsk_adv_civ_origin_star_siblings }
			this = { has_country_flag = lrsk_adv_civ_created_sibling }
		}
		# Skip if there's no new modifier to apply.
		OR = {
			this = { NOT = { has_modifier = lrsk_adv_civ_siblings_strife } }
			this = { NOT = { has_modifier = lrsk_adv_civ_siblings_sbs } }
		}
		# Our two relevant battle conditions
		OR = {
			# Is our fleet in combat with a fleet owned by sibling?
			fromfrom = { any_combatant_fleet = { owner = { has_relation_flag = {
				who = this
				flag = lrsk_adv_civ_our_siblings
			} } } }
			OR = {
				# On attacking, is defender fighting a sibling?
				fromfromfrom = { any_combatant_fleet = { owner = { has_relation_flag = {
					who = this
					flag = lrsk_adv_civ_our_siblings
				} } } }
				# Alternately, am I now in combat with anyone whose fleets are in combat with a sibling?
				fromfrom = { any_combatant_fleet = { any_combatant_fleet = { owner = { has_relation_flag = {
					who = this
					flag = lrsk_adv_civ_our_siblings
				} } } } }
			}
		}
	}

	immediate = {
		# If siblings are fighting each other
		IF = { limit = {
			this = { NOT = { has_modifier = lrsk_adv_civ_siblings_strife } }
			# Is our fleet in combat with a fleet owned by sibling?
			fromfrom = { any_combatant_fleet = { owner = { has_relation_flag = {
				who = this
				flag = lrsk_adv_civ_our_siblings
			} } } } }

			fromfrom = { random_combatant_fleet = {
				limit = { owner = { has_relation_flag = {
					who = this
					flag = lrsk_adv_civ_our_siblings
				} } }
				owner = { country_event = { id = lrsk_adv_civ_siblings.6 } }
			} }
			this = { country_event = { id = lrsk_adv_civ_siblings.6 } }
		}
		# On attacking, is defender fighting a sibling?
		ELSE_IF = {
			limit = {
				this = { NOT = { has_modifier = lrsk_adv_civ_siblings_sbs } }
				fromfromfrom = { any_combatant_fleet = { owner = { has_relation_flag = {
					who = this
					flag = lrsk_adv_civ_our_siblings
				} } } }
			}

			this = { country_event = { id = lrsk_adv_civ_siblings.7 } }
			fromfromfrom = { random_combatant_fleet = {
				limit = { owner = { has_relation_flag = {
					who = this
					flag = lrsk_adv_civ_our_siblings
				} } } }
				owner = { country_event = { id = lrsk_adv_civ_siblings.7 } }
			} }
		}
		# Alternately, am I now in combat with anyone whose fleets are in combat with a sibling? (I sure hope this actually makes sense!)
		ELSE_IF = {
			limit = {
				this = { NOT = { has_modifier = lrsk_adv_civ_siblings_sbs } }
				fromfrom = { any_combatant_fleet = { any_combatant_fleet = { owner = { has_relation_flag = {
					who = this
					flag = lrsk_adv_civ_our_siblings
				} } } } }
			}

			this = { country_event = { id = lrsk_adv_civ_siblings.7 } }
			fromfrom = { random_combatant_fleet = {
				limit = { any_combatant_fleet = { owner = { has_relation_flag = {
					who = this
					flag = lrsk_adv_civ_our_siblings
				} } } }
				random_combatant_fleet = {
					limit = { owner = { has_relation_flag = {
						who = this
						flag = lrsk_adv_civ_our_siblings
					} } }
					owner = { country_event = { id = lrsk_adv_civ_siblings.7 } }
				}
			} }
		}
	}
}

# Battle each other
country_event = {
	id = lrsk_adv_civ_siblings.6
	title = lrsk_adv_civ_siblings.6.name
	desc = lrsk_adv_civ_siblings.6.desc
	location = fromfromfrom # Hopefully this scopes to the attacking fleet??? Or at least a fleet in the battle.
	picture = GFX_evt_small_space_battle
	show_sound = event_space_battle
	is_triggered_only = yes

	trigger = { NOT = { has_modifier = lrsk_adv_civ_siblings_strife } } # JIC

	immediate = { add_modifier = { modifier = lrsk_adv_civ_siblings_strife } }

	option = {
		name = LRSK_ADV_CIV_EVENT_SIBLINGS_SORROW
		custom_tooltip = LRSK_ADV_CIV_EVENT_SIBLINGS_SORROW_TIP
	}
}

# Battle side-by-side
country_event = {
	id = lrsk_adv_civ_siblings.7
	title = lrsk_adv_civ_siblings.7.name
	id = lrsk_adv_civ_siblings.7.desc
	location = fromfromfrom # Hopefully this scopes to the attacking fleet??? Or at least a fleet in the battle.
	picture = GFX_evt_federation_fleet
	show_sound = event_ship_thrusters
	is_triggered_only = yes

	trigger = { NOT = { has_modifier = lrsk_adv_civ_siblings_sbs } } # JIC

	immediate = { add_modifier = { modifier = lrsk_adv_civ_siblings_sbs } }

	option = {
		name = LRSK_ADV_CIV_EVENT_SIBLINGS_PRIDE
		custom_tooltip = LRSK_ADV_CIV_EVENT_SIBLINGS_PRIDE_TIP
	}
}

# Federated
country_event = {
	id = lrsk_adv_civ_siblings.8
	title = lrsk_adv_civ_siblings.8.name
	desc = lrsk_adv_civ_siblings.8.desc
	picture = GFX_evt_galactic_senate
	show_sound = event_conversation
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_safety_lock } # Always false, comment out to activate these events.
		
		any_country = { limit = {
			is_in_federation_with = root
			has_relation_flag = {
				who = root
				flag = lrsk_adv_civ_our_siblings
			}
			NOT = { has_modifier = lrsk_adv_civ_siblings_federated }
		} }
	}

	immediate = {
		random_country = { limit = {
			is_in_federation_with = root
			has_relation_flag = {
				who = root
				flag = lrsk_adv_civ_our_siblings
			} }
			save_event_target_as = lrsk_adv_civ_siblings_them
		}
		add_modifier = { modifier = lrsk_adv_civ_siblings_federated }
		root = { save_event_target_as = lrsk_adv_civ_siblings_us }
	}

	option = {
		name = LRSK_ADV_CIV_EVENT_SIBLINGS_UNITY
		add_influence = 200
		
		# Ensure sibling also gets this if it hasn't somehow already (prevents continuous recusrive events)
		hidden_effect = { event_target:lrsk_adv_civ_siblings_them = {
			IF = {
				limit = {  NOT = { has_modifier = lrsk_adv_civ_siblings_federated } }
				country_event = { id = lrsk_adv_civ_siblings.8 }
			} }
		}
	}
}

# If no longer federated
country_event = {
	id = lrsk_adv_civ_siblings.9
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_safety_lock } # Always false, comment out to activate these events.
	}

	immediate = {		
		IF = { limit = { has_modifier = lrsk_adv_civ_siblings_federated } remove_modifier = lrsk_adv_civ_siblings_federated }
		random_country = { limit = {
			has_relation_flag = {
				who = root
				flag = lrsk_adv_civ_our_siblings
			} }
			IF = { limit = { has_modifier = lrsk_adv_civ_siblings_federated } remove_modifier = lrsk_adv_civ_siblings_federated }
		}
	}
}

# Remove any modifiers at end of war
country_event = {
	id = lrsk_adv_civ_siblings.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_safety_lock } # Always false, comment out to activate these events.
	}

	# Remove relevant modifiers from any participant who is no longer in any war.
	# Basically, this should ensure that if a sibling empire gets one of these, it will keep it until it is at peace.
	# It's not really the BEST solution but it's what I've got for now.
	immediate = { fromfrom = {
		every_war_participant = {
			limit = {
				has_modifier = lrsk_adv_civ_siblings_sbs
				is_at_war = no
			}
			remove_modifier = lrsk_adv_civ_siblings_sbs
		}
		every_war_participant = {
			limit = {
				has_modifier = lrsk_adv_civ_siblings_strife
				is_at_war = no
			}
			remove_modifier = lrsk_adv_civ_siblings_strife
		}
	} }
}

# Sibling destroyed gate
country_event = {
	id = lrsk_adv_civ_siblings.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_safety_lock } # Always false, comment out to activate these events.
		
		OR = {
			has_origin = lrsk_adv_civ_origin_star_siblings # Not sure this is really neded but eh
			has_country_flag = lrsk_adv_civ_created_sibling
		}
	}

	immediate = {
		random_country = {
			limit = {
				has_relation_flag = {
					who = this
					flag = lrsk_adv_civ_our_siblings
				}
			}
			country_event = { id = lrsk_adv_civ_siblings.11 }
		}
	}
}

# Sibling destroyed
country_event = {
	id = lrsk_adv_civ_siblings.11
	title = lrsk_adv_civ_siblings.11.name
	id = lrsk_adv_civ_siblings.11.desc
	picture = GFX_evt_dead_city
	show_sound = event_ghost_town
	is_triggered_only = yes

	immediate = {
		from = { save_event_target_as = lrsk_adv_civ_siblings_dead } # Hopefully this scopes to the dead sibling
		add_modifier = { modifier = lrsk_adv_civ_siblings_grieving days = 18000 } # 50 years (a "generation" away from forgetting)
	}

	option = {
		name = LRSK_ADV_CIV_EVENT_SIBLINGS_GRIEF
		#custom_tooltip = LRSK_ADV_CIV_EVENT_SIBLINGS_GRIEF_TIP

		hidden_effect = {
			IF = { limit = { has_modifier = lrsk_adv_civ_siblings_meeting } remove_modifier = lrsk_adv_civ_siblings_meeting }
			IF = { limit = { has_modifier = lrsk_adv_civ_siblings_strife } remove_modifier = lrsk_adv_civ_siblings_strife }
			IF = { limit = { has_modifier = lrsk_adv_civ_siblings_sbs } remove_modifier = lrsk_adv_civ_siblings_sbs }
			IF = { limit = { has_modifier = lrsk_adv_civ_siblings_federated } remove_modifier = lrsk_adv_civ_siblings_federated }
		}
	}
}

# Bugfix event
country_event = {
	id = lrsk_adv_civ_siblings.100
	is_triggered_only = yes
	hide_window = yes

	trigger = { has_origin = lrsk_adv_civ_origin_star_siblings }

	immediate = {
		IF = { limit = { has_modifier = lrsk_adv_civ_siblings_meeting } remove_modifier = lrsk_adv_civ_siblings_meeting }
		IF = { limit = { has_modifier = lrsk_adv_civ_siblings_strife } remove_modifier = lrsk_adv_civ_siblings_strife }
		IF = { limit = { has_modifier = lrsk_adv_civ_siblings_sbs } remove_modifier = lrsk_adv_civ_siblings_sbs }
		IF = { limit = { has_modifier = lrsk_adv_civ_siblings_federated } remove_modifier = lrsk_adv_civ_siblings_federated }
		IF = { limit = { has_modifier = lrsk_adv_civ_siblings_grieving } remove_modifier = lrsk_adv_civ_siblings_grieving }
	}
}
