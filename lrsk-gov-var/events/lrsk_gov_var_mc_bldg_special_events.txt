# Government Variety Pack
# Events - Megacorp Branch Building Events
# Author: littleraskol

# These events are for certain special building effects

namespace = lrsk_gvp_mc_bldg_special

# Handle special military leader bonus from Military Excellence Academy (Gate for delay)
country_event = {
	id = lrsk_gvp_mc_bldg_special.10
	hide_window = yes
	is_triggered_only = yes

	# Only fire if leader's empire has a bonus and the leader is appropriate
	trigger = {
		OR = {
			AND = {
				check_variable = { which = lrsk_general_training_bonus value > 0 }
				from = { leader_class = general }
			}
			AND = {
				check_variable = { which = lrsk_admiral_training_bonus value > 0 }
				from = { leader_class = admiral }
			}
		}
	}

	immediate = {
		# we want to give the default level up event a chance to run
		country_event = { id = lrsk_gvp_mc_bldg_special.11 days = 2 }
	}
}

# Handle special military leader bonus from Military Excellence Academy
country_event = {
	id = lrsk_gvp_mc_bldg_special.11
	hide_window = yes
	is_triggered_only = yes

	# Only fire if leader's empire has a bonus and the leader is appropriate
	trigger = {
		OR = {
			AND = {
				check_variable = { which = lrsk_general_training_bonus value > 0 }
				from = { leader_class = general }
			}
			AND = {
				check_variable = { which = lrsk_admiral_training_bonus value > 0 }
				from = { leader_class = admiral }
			}
		}
	}

	immediate = {
		random_list = {
			20 = {
				modifier = {
					add = 10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 1 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 1 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = 10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 2 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 2 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = 10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 3 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 3 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = 10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 4 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 4 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = 10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 5 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 5 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = 10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 6 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 6 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = 10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 7 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 7 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = 10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 8 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 8 }
							from = { leader_class = admiral }
						}
					}
				}

				from = { lrsk_add_random_good_leader_trait = yes }
			}
			80 = {
				modifier = {
					add = -10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 1 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 1 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = -10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 2 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 2 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = -10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 3 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 3 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = -10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 4 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 4 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = -10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 5 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 5 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = -10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 6 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 6 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = -10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 7 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 7 }
							from = { leader_class = admiral }
						}
					}
				}
				modifier = {
					add = -10
					OR = {
						AND = {
							check_variable = { which = lrsk_general_training_bonus value > 8 }
							from = { leader_class = general }
						}
						AND = {
							check_variable = { which = lrsk_admiral_training_bonus value > 8 }
							from = { leader_class = admiral }
						}
					}
				}

				# Do nothing
			}
		}
	}
}

# Handle pop steal from Reformatory Workhouse
country_event = {
	id = lrsk_gvp_mc_bldg_special.20
	hide_window = yes
	mean_time_to_happen = { months = 12 }

	# Only fire if a criminal slaver corp with built workhouses, and if there are applicable planets/empires
	trigger = {
		has_valid_civic = civic_criminal_heritage
		has_valid_civic = civic_indentured_assets
		check_variable = { which = lrsk_num_built_workhouses value > 0 }
		
		any_country = {
			NOT = { has_country_flag = lrsk_pop_stolen_cooldown }
			check_variable = { which = lrsk_num_owned_workhouses value > 0 }
			any_owned_planet = { has_planet_flag = lrsk_could_lose_pops_to@root }
		}
	}

	immediate = {
		save_event_target_as = lrsk_slaver_corp_to_steal

		every_country = {
			limit = {
				NOT = { has_country_flag = lrsk_pop_stolen_cooldown }
				check_variable = { which = lrsk_num_owned_workhouses value > 0 }
				any_owned_planet = { has_planet_flag = lrsk_could_lose_pops_to@root }
			}

			while = {
				limit = {
					NOT = { has_country_flag = lrsk_pop_stolen_cooldown }
					any_owned_planet = {
						has_planet_flag = lrsk_could_lose_pops_to@root
						NOT = { has_planet_flag = lrsk_pop_steal_rolled }
					}
				}

				random_owned_planet = {
					limit = {
						has_planet_flag = lrsk_could_lose_pops_to@root
						NOT = { has_planet_flag = lrsk_pop_steal_rolled }
					}

					set_timed_planet_flag = { flag = lrsk_pop_steal_rolled days = 10 } # marks this planet

					random_list = {
						5 = {
							modifier = {
								add = -4
								num_pops < 5
							}
							modifier = {
								add = 5
								num_pops > 15
							}
							modifier = {
								add = 5
								num_pops > 45
							}
							modifier = {
								add = 5
								planet_crime > 20
							}
							modifier = {
								add = 5
								planet_crime > 40
							}
							modifier = {
								add = 5
								planet_crime > 60
							}

							# Do the steal
							owner = { set_timed_country_flag = { flag = lrsk_pop_stolen_cooldown days = 1800 } } # 5 year cooldown
						}
						95 = {
							modifier = {
								add = 4
								num_pops < 5
							}
							modifier = {
								add = -5
								num_pops > 15
							}
							modifier = {
								add = -5
								num_pops > 45
							}
							modifier = {
								add = -5
								planet_crime > 20
							}
							modifier = {
								add = -5
								planet_crime > 40
							}
							modifier = {
								add = -5
								planet_crime > 60
							}
							
							# Do nothing
						}
					}
				}
			}
		}
	}
}

# Handle favor gain chance from Local News Station
country_event = {
	id = lrsk_gvp_mc_bldg_special.30
	hide_window = yes
	mean_time_to_happen = { months = 12 }

	# Only fire if a media corp with built local news stations, and if there are applicable planets/empires
	trigger = {
		has_valid_civic = civic_media_conglomerate
		check_variable = { which = lrsk_num_built_localmedia value > 0 }
		
		any_country = {
			NOT = { has_country_flag = lrsk_scandal_favor_cooldown }
			check_variable = { which = lrsk_num_owned_localmedia value > 0 }
			any_owned_planet = { has_planet_flag = lrsk_could_leak_scandal_to@root }
		}
	}

	immediate = {
		save_event_target_as = lrsk_media_corp_to_scoop

		every_country = {
			limit = {
				NOT = { has_country_flag = lrsk_scandal_favor_cooldown }
				check_variable = { which = lrsk_num_owned_localmedia value > 0 }
				any_owned_planet = { has_planet_flag = lrsk_could_leak_scandal_to@root }
			}

			while = {
				limit = {
					NOT = { has_country_flag = lrsk_scandal_favor_cooldown }
					any_owned_planet = {
						has_planet_flag = lrsk_could_leak_scandal_to@root
						NOT = { has_planet_flag = lrsk_scandal_rolled }
					}
				}

				random_owned_planet = {
					limit = {
						has_planet_flag = lrsk_could_leak_scandal_to@root
						NOT = { has_planet_flag = lrsk_scandal_rolled }
					}

					set_timed_planet_flag = { flag = lrsk_scandal_rolled days = 10 } # marks this planet

					random_list = {
						5 = {
							modifier = {
								add = 5
								planet_stability < 90
							}
							modifier = {
								add = 5
								planet_stability < 70
							}
							modifier = {
								add = 5
								planet_crime > 20
							}
							modifier = {
								add = 5
								planet_crime > 40
							}
							modifier = {
								add = 5
								planet_crime > 60
							}
							modifier = {
								add = 10
								is_capital = yes
							}

							# Send the favor
							owner = { set_timed_country_flag = { flag = lrsk_scandal_favor_cooldown days = 1800 } } # 5 year cooldown
						}
						95 = {
							modifier = {
								add = -5
								planet_stability < 90
							}
							modifier = {
								add = -5
								planet_stability < 70
							}
							modifier = {
								add = -5
								planet_crime > 20
							}
							modifier = {
								add = -5
								planet_crime > 40
							}
							modifier = {
								add = -5
								planet_crime > 60
							}
							modifier = {
								add = -10
								is_capital = yes
							}
							
							# Do nothing
						}
					}
				}
			}
		}
	}
}

# Handle bonuses from Offworld Jobs Placement
country_event = {
	id = lrsk_gvp_mc_bldg_special.40
	hide_window = yes
	is_triggered_only = yes

	# Only fire if a prospector corp
	trigger = {
		has_valid_civic = civic_private_prospectors

		# Skip if no change
		OR = {
			check_variable = { which = lrsk_offworld_workers_bonus value > lrsk_offworld_workers_bonus_prev }
			check_variable = { which = lrsk_offworld_workers_bonus value < lrsk_offworld_workers_bonus_prev }
		}
	}

	immediate = {
		log = "Attempting offworld work bonus application."

		# Remove previous modifier
		switch = {
			trigger = has_modifier
			lrsk_gvp_empire_offworld_work_bonus_1 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_1 }
			lrsk_gvp_empire_offworld_work_bonus_2 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_2 }
			lrsk_gvp_empire_offworld_work_bonus_3 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_3 }
			lrsk_gvp_empire_offworld_work_bonus_4 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_4 }
			lrsk_gvp_empire_offworld_work_bonus_5 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_5 }
			lrsk_gvp_empire_offworld_work_bonus_6 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_6 }
			lrsk_gvp_empire_offworld_work_bonus_7 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_7 }
			lrsk_gvp_empire_offworld_work_bonus_8 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_8 }
			lrsk_gvp_empire_offworld_work_bonus_9 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_9 }
			lrsk_gvp_empire_offworld_work_bonus_10 = { remove_modifier = lrsk_gvp_empire_offworld_work_bonus_10 }
		}

		# Only add a modifier back if there is a bonus to apply
		IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value > 0 } }
			IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 1 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_1 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 2 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_2 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 3 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_3 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 4 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_4 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 5 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_5 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 6 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_6 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 7 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_7 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 8 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_8 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value = 9 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_9 }
			}
			ELSE_IF = { limit = { check_variable = { which = lrsk_offworld_workers_bonus value >= 10 } }
				add_modifier = { modifier = lrsk_gvp_empire_offworld_work_bonus_10 }
			}
			#ELSE = {
			#	# Do nothing?
			#}
		}

		# Remember for next time	
		set_variable = { which = lrsk_offworld_workers_bonus_prev value = lrsk_offworld_workers_bonus }
	}
}