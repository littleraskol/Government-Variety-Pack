# Government Variety Pack
# Events - Sublight Empire / Commonwealth
# Author: littleraskol

namespace = lrsk_gov_var_sublight_origins

# Sets up the vassals
country_event = {
	id = lrsk_gov_var_sublight_origins.1
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			has_origin = lrsk_gov_var_origin_sublight_empire
			has_origin = lrsk_gov_var_origin_sublight_commonwealth
		}
	}

	immediate = {
		# Using variables to catch gauranteed ideal worlds.
		# lrsk_gcol = number of guaranteed colonies.
		# lrsk_rcol = number of randomly generated colonies we need to make good.
		if = {
			limit = { num_guaranteed_colonies > 2 }
			set_variable = { which = lrsk_gcol value = 3 }
			set_variable = { which = lrsk_rcol value = 0 } # Technically this does nothing but eh explicitness...
		}
		else_if = {
			limit = { num_guaranteed_colonies = 2 }
			set_variable = { which = lrsk_gcol value = 2 }
			set_variable = { which = lrsk_rcol value = 1 }
		}
		else_if = {
			limit = { num_guaranteed_colonies = 1 }
			set_variable = { which = lrsk_gcol value = 1 }
			set_variable = { which = lrsk_rcol value = 2 }
		}
		else = {
			set_variable = { which = lrsk_gcol value = 0 } # Technically this does nothing but eh explicitness...
			set_variable = { which = lrsk_rcol value = 3 }
		}

		log = "Num of g. colonies = [this.lrsk_gcol]"
		log = "Num of r. colonies =  [this.lrsk_rcol]"

		this = { save_event_target_as = lrsk_sublight_overlord }
		owner_species = { save_event_target_as = lrsk_sublight_overlord_species }

		capital_scope = { solar_system = {
			# Transferring variables
			set_variable = { which = lrsk_gcol value = prevprev } 
			set_variable = { which = lrsk_rcol value = prevprev }

			log = "Switched to capital system [this.GetName], num of g. colonies = [this.lrsk_gcol]"
			log = "Switched to capital system [this.GetName], num of r. colonies =  [this.lrsk_rcol]"


			# This will flag three planets as potential sublight colonies
			# Will check for any ideal planets and flag them first.
			# Will make up the difference with random normal planets flagged to be reformed.		
			while = {
				count = 3 # The max num of times we ever want to do this
				log = "Starting gcol flagger..."
				IF = {
					limit = {
						check_variable = {
							which = lrsk_gcol
							value > 0
						}
					}
					log = "In gcol flagger, num to flag = [this.lrsk_gcol]"
					closest_system = { 
						limit = {
							has_owner = no
							NOT = { star = { has_planet_flag = lrsk_sublight_colony_system } }
							any_system_planet = { has_planet_flag = prescripted_ideal }
						}

						log = "gcol flagger: found ideal colony in [this.GetName]"
						random_system_planet = { limit = { has_planet_flag = prescripted_ideal }
							log = "gcol flagger: flagging planet [this.GetName]"
							set_planet_flag = lrsk_sublight_colony_planet
						}
						star = { set_planet_flag = lrsk_sublight_colony_system } # ensures that systems with more than one eligible world don't get more than one tagged world
					}
					subtract_variable = {
						which = lrsk_gcol
						value = 1
					}
				}
				log = "gcol flagger loop completed."
			}			
			
			while = {
				count = 3 # The max num of times we ever want to do this
				log = "Starting rcol flagger..."
				IF = {
					limit = {
						check_variable = {
							which = lrsk_rcol
							value > 0
						}
					}
					log = "In rcol flagger, num to flag = [this.lrsk_rcol]"
					closest_system = {
						limit = {
							NOT = { star = { has_planet_flag = lrsk_sublight_colony_system } }
							has_owner = no
							any_system_planet = {
								is_ringworld = no
								is_asteroid = no
								is_star = no
								is_moon = no
							}
						}
						log = "rcol flagger: found suitable colony candidate in [this.GetName]"
						random_system_planet = { 
							limit = {
								is_ringworld = no
								is_asteroid = no
								is_star = no
								is_moon = no
							}
							log = "rcol flagger: flagging planet [this.GetName]"
							set_planet_flag = lrsk_sublight_colony_planet
							set_planet_flag = lrsk_sublight_reform_planet
						}
						star = { set_planet_flag = lrsk_sublight_colony_system } # ensures that systems with more than one eligible world don't get more than one tagged world
					}
					subtract_variable = {
						which = lrsk_rcol
						value = 1
					}
				}
				log = "rcol flagger loop completed."
			}

			# Look at all the systems we flagged, catch and reform all planets flagged for reform.
			while = {
				count = 3
				log = "In rcol reformer"
				closest_system = {
					limit = { star = { has_planet_flag = lrsk_sublight_colony_system } }
					log = "In rcol reformer; found sublight system: [this.GetName]"
					IF = {
						limit = { any_system_planet = { has_planet_flag = lrsk_sublight_reform_planet } }
						random_system_planet = { limit = { has_planet_flag = lrsk_sublight_reform_planet }
							log = "In rcol reformer; found planet to reform: [this.GetName]"
							set_planet_size = 16
							if = {
								limit = { event_target:lrsk_sublight_overlord = { ideal_planet_class = pc_arid } }
								change_pc = pc_arid
							}
							else_if = {
								limit = { event_target:lrsk_sublight_overlord = { ideal_planet_class = pc_desert } }
								change_pc = pc_desert
							}
							else_if = {
								limit = { event_target:lrsk_sublight_overlord = { ideal_planet_class = pc_tropical } }
								change_pc = pc_tropical
							}
							else_if = {
								limit = { event_target:lrsk_sublight_overlord = { ideal_planet_class = pc_ocean } }
								change_pc = pc_ocean
							}
							else_if = {
								limit = { event_target:lrsk_sublight_overlord = { ideal_planet_class = pc_tundra } }
								change_pc = pc_tundra
							}
							else_if = {
								limit = { event_target:lrsk_sublight_overlord = { ideal_planet_class = pc_arctic } }
								change_pc = pc_arctic
							}
							else_if = {
								limit = { event_target:lrsk_sublight_overlord = { ideal_planet_class = pc_alpine } }
								change_pc = pc_alpine
							}
							else_if = {
								limit = { event_target:lrsk_sublight_overlord = { ideal_planet_class = pc_savannah } }
								change_pc = pc_savannah
							}
							# If all else fails, try continental (also this will catch continental)
							else = { change_pc = pc_continental }
							reroll_planet = yes
							remove_planet_flag = lrsk_sublight_reform_planet
						}
					}
					star = { remove_planet_flag = lrsk_sublight_colony_system }
				}
			}

			# Create dissidents
			closest_system = { limit = { any_system_planet = { has_planet_flag = lrsk_sublight_colony_planet } }
				log = "Creating dissident system: [this.GetName]"
				random_system_planet = { limit = { has_planet_flag = lrsk_sublight_colony_planet }
					log = "Creating dissident colony on: [this.GetName]"
					remove_planet_flag = lrsk_sublight_colony_planet
					set_planet_flag = lrsk_sublight_dissident_homeworld

					# I can't believe I am doing this dumb shit
					event_target:lrsk_sublight_overlord = {
						log = "Doing total bullshit!!!!!!"
						IF = {
							limit = { OR = {
								has_ethic = ethic_authoritarian
								has_ethic = ethic_fanatic_authoritarian 
							} }
							switch = {
								trigger = has_ethic
								ethic_xenophobe = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_xenophile"
											ethic = "ethic_fanatic_egalitarian"
										}
									}
								}
								ethic_xenophile = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_xenophobe"
											ethic = "ethic_fanatic_egalitarian"
										}
									}
								}
								ethic_materialist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_spiritualist"
											ethic = "ethic_fanatic_egalitarian"
										}
									}
								}
								ethic_spiritualist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_materialist"
											ethic = "ethic_fanatic_egalitarian"
										}
									}
								}
								ethic_militarist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_pacifist"
											ethic = "ethic_fanatic_egalitarian"
										}
									}
								}
								ethic_pacifist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_militarist"
											ethic = "ethic_fanatic_egalitarian"
										}
									}
								}
							}
						}
						ELSE_IF ={
							limit = { OR = {
								has_ethic = ethic_egalitarian
								has_ethic = ethic_fanatic_egalitarian
							} }
							switch = {
								trigger = has_ethic
								ethic_xenophobe = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no										
										authority = random
										ethos = {
											ethic = "ethic_xenophile"
											ethic = "ethic_fanatic_authoritarian"
										}
									}
								}
								ethic_xenophile = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_xenophobe"
											ethic = "ethic_fanatic_authoritarian"
										}
									}
								}
								ethic_materialist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_spiritualist"
											ethic = "ethic_fanatic_authoritarian"
										}
									}
								}
								ethic_spiritualist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_materialist"
											ethic = "ethic_fanatic_authoritarian"
										}
									}
								}
								ethic_militarist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_pacifist"
											ethic = "ethic_fanatic_authoritarian"
										}
									}
								}
								ethic_pacifist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_militarist"
											ethic = "ethic_fanatic_authoritarian"
										}
									}
								}
							}
						}
						ELSE_IF ={
							limit = { OR = {
								has_ethic = ethic_xenophobe
								has_ethic = ethic_fanatic_xenophobe 
							} }
							switch = {
								trigger = has_ethic
								ethic_materialist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_spiritualist"
											ethic = "ethic_fanatic_xenophile"
										}
									}
								}
								ethic_spiritualist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_materialist"
											ethic = "ethic_fanatic_xenophile"
										}
									}
								}
								ethic_militarist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_pacifist"
											ethic = "ethic_fanatic_xenophile"
										}
									}
								}
								ethic_pacifist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_militarist"
											ethic = "ethic_fanatic_xenophile"
										}
									}
								}
							}
						}
						ELSE_IF ={
							limit = { OR = {
								has_ethic = ethic_xenophile
								has_ethic = ethic_fanatic_xenophile
							} }
							switch = {
								trigger = has_ethic
								ethic_materialist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_spiritualist"
											ethic = "ethic_fanatic_xenophobe"
										}
										#Have to preset civics so we don't get fanatic purifiers...
										civics = {
											civic = civic_functional_architecture
											civic = civic_cutthroat_politics
										}
									}
								}
								ethic_spiritualist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_materialist"
											ethic = "ethic_fanatic_xenophobe"
										}
									}
								}
								ethic_militarist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_pacifist"
											ethic = "ethic_fanatic_xenophobe"
										}
									}
								}
								ethic_pacifist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_militarist"
											ethic = "ethic_fanatic_xenophobe"
										}
										#Have to preset civics so we don't get fanatic purifiers...
										civics = {
											civic = civic_functional_architecture
											civic = civic_cutthroat_politics
										}
									}
								}
							}
						}
						ELSE_IF ={
							limit = { OR = {
								has_ethic = ethic_materialist
								has_ethic = ethic_fanatic_materialist 
							} }
							switch = {
								trigger = has_ethic
								ethic_militarist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_pacifist"
											ethic = "ethic_fanatic_spiritualist"
										}
									}
								}
								ethic_pacifist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_militarist"
											ethic = "ethic_fanatic_spiritualist"
										}
									}
								}
							}
						}
						ELSE_IF ={
							limit = { OR = {
								has_ethic = ethic_spiritualist
								has_ethic = ethic_fanatic_spiritualist 
							} }
							switch = {
								trigger = has_ethic
								ethic_militarist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_pacifist"
											ethic = "ethic_fanatic_materialist"
										}
									}
								}
								ethic_pacifist = {
									create_country = {
										species = event_target:lrsk_sublight_overlord_species
										name_list = event_target:lrsk_sublight_overlord
										type = default
										origin = "lrsk_gov_var_origin_sublight_colony_dis"
										ignore_initial_colony_error = yes
										day_zero_contact = no
										authority = random
										ethos = {
											ethic = "ethic_militarist"
											ethic = "ethic_fanatic_materialist"
										}
									}
								}
							}
						}
						ELSE = {
							# fuck it, they get random if they somehow get this far...
							create_country = {
								species = event_target:lrsk_sublight_overlord_species
								name_list = event_target:lrsk_sublight_overlord
								type = default
								origin = "lrsk_gov_var_origin_sublight_colony_dis"
								ignore_initial_colony_error = yes
								day_zero_contact = no
								authority = random
								ethos = random
							}
						}
						log = "Finsihed total bullshit!!!!!!"
					}

					# COMMENT ALL THE FOLLOWING OUT IF NOT TESTING.
					#create_country = {
					#	species = event_target:lrsk_sublight_overlord_species
					#	name_list = event_target:lrsk_sublight_overlord
					#	type = default
					#	origin = "lrsk_gov_var_origin_sublight_colony_dis"
					#	ignore_initial_colony_error = yes
					#	day_zero_contact = no
					#	ethos = random # CHANGE THIS
					#}

					last_created_country = {
						save_event_target_as = lrsk_sublight_dissident_colony
						establish_communications_no_message = event_target:lrsk_sublight_overlord
						log = "Saved dissident country: [this.GetName]"
					}

					create_colony = {
						owner = event_target:lrsk_sublight_dissident_colony
					}
					generate_start_deposits_and_blockers = yes
					generate_start_buildings_and_districts = yes
					generate_start_pops = yes
					solar_system = {
						create_starbase = {
							size = starbase_starport
							module = shipyard
							building = crew_quarters
							owner = event_target:lrsk_sublight_dissident_colony
							effect = {
								set_starbase_module = {
									slot = 1
									module = trading_hub
								}
							}
						}
					}

					event_target:lrsk_sublight_dissident_colony = {
						create_starting_leaders = yes
						country_event = { id = game_start.9 }
						country_event = { id = game_start.33 days = 1 } # needs delay for system ownership to settle
						set_name = random # Fixes some naming issues
						log = "Establishing dissident country: [this.GetName]"

						add_modifier = { modifier = lrsk_gov_var_empire_colony_red_tape }
						IF = { limit = { event_target:lrsk_sublight_overlord = { has_origin = lrsk_gov_var_origin_sublight_empire } }
							add_modifier = { modifier = lrsk_gov_var_empire_black_box_drives }
							set_subject_of = {
								who = event_target:lrsk_sublight_overlord
								subject_type = lrsk_gov_var_sublight_vassal
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_ftlmn_sublight
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_vasag_sublight
							}
							log = "Detected this is sublight vassal of: [event_target:lrsk_sublight_overlord.GetName]"
						}
						ELSE = {
							set_subject_of = {
								who = event_target:lrsk_sublight_overlord
								subject_type = lrsk_gov_var_sublight_satellite
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_satag_sublight
							}
							log = "Detected this is sublight satellite of: [event_target:lrsk_sublight_overlord.GetName]"
						}
						add_opinion_modifier = {
							who = event_target:lrsk_sublight_overlord
							modifier = opinion_lrsk_gov_var_dsdnt_sublight
						}
						log = "Done with dissident establishment"
					}
				}
			}

			# Create genship
			closest_system = { limit = { any_system_planet = { has_planet_flag = lrsk_sublight_colony_planet } }
				log = "Creating genship system: [this.GetName]"
				random_system_planet = { limit = { has_planet_flag = lrsk_sublight_colony_planet }
					log = "Creating genship colony on: [this.GetName]"
					remove_planet_flag = lrsk_sublight_colony_planet
					set_planet_flag = lrsk_sublight_genship_homeworld
					create_country = {
						species = event_target:lrsk_sublight_overlord_species
						name_list = random
						type = default
						origin = "lrsk_gov_var_origin_sublight_colony_gsp"
						ignore_initial_colony_error = yes
						day_zero_contact = no
						authority = random
						ethos = random
						effect = {
							save_event_target_as = lrsk_sublight_genship_colony
							establish_communications_no_message = event_target:lrsk_sublight_overlord
						}
					}
					log = "Saved genship country: [event_target:lrsk_sublight_genship_colony.GetName]"

					create_colony = {
						owner = event_target:lrsk_sublight_genship_colony
					}
					generate_start_deposits_and_blockers = yes
					generate_start_buildings_and_districts = yes
					generate_start_pops = yes
					solar_system = {
						create_starbase = {
							size = starbase_starport
							module = shipyard
							building = crew_quarters
							owner = event_target:lrsk_sublight_genship_colony
							effect = {
								set_starbase_module = {
									slot = 1
									module = trading_hub
								}
							}
						}
					}

					event_target:lrsk_sublight_genship_colony = {
						create_starting_leaders = yes
						country_event = { id = game_start.9 }
						country_event = { id = game_start.33 days = 1 } # needs delay for system ownership to settle
						set_name = random # Fixes some naming issues
						log = "Establishing genship country: [this.GetName]"

						add_modifier = { modifier = lrsk_gov_var_empire_colony_red_tape }
						IF = { limit = { event_target:lrsk_sublight_overlord = { has_origin = lrsk_gov_var_origin_sublight_empire } }
							add_modifier = { modifier = lrsk_gov_var_empire_black_box_drives }
							set_subject_of = {
								who = event_target:lrsk_sublight_overlord
								subject_type = lrsk_gov_var_sublight_vassal
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_ftlmn_sublight
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_vasag_sublight
							}
							log = "Detected this is sublight vassal of: [event_target:lrsk_sublight_overlord.GetName]"
						}
						ELSE = {
							set_subject_of = {
								who = event_target:lrsk_sublight_overlord
								subject_type = lrsk_gov_var_sublight_satellite
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_satag_sublight
							}
							log = "Detected this is sublight satellite of: [event_target:lrsk_sublight_overlord.GetName]"
						}
						log = "Done with genship establishment"
					}
				}
			}

			# Create loyalists
			closest_system = { limit = { any_system_planet = { has_planet_flag = lrsk_sublight_colony_planet } }
				log = "Creating loyalist system: [this.GetName]"
				random_system_planet = { limit = { has_planet_flag = lrsk_sublight_colony_planet }
					log = "Creating loyalist colony on: [this.GetName]"
					remove_planet_flag = lrsk_sublight_colony_planet
					set_planet_flag = lrsk_sublight_loyalist_homeworld
					create_country = {
						species = event_target:lrsk_sublight_overlord_species
						name_list = event_target:lrsk_sublight_overlord
						type = default
						origin = "lrsk_gov_var_origin_sublight_colony_loy"
						ignore_initial_colony_error = yes
						day_zero_contact = no
						ethos = event_target:lrsk_sublight_overlord
						authority = event_target:lrsk_sublight_overlord
						effect = {
							save_event_target_as = lrsk_sublight_loyalist_colony
							establish_communications_no_message = event_target:lrsk_sublight_overlord
						}
					}
					log = "Saved loyalist country: [event_target:lrsk_sublight_genship_colony.GetName]"

					create_colony = {
						owner = event_target:lrsk_sublight_loyalist_colony
					}
					generate_start_deposits_and_blockers = yes
					generate_start_buildings_and_districts = yes
					generate_start_pops = yes
					solar_system = {
						create_starbase = {
							size = starbase_starport
							module = shipyard
							building = crew_quarters
							owner = event_target:lrsk_sublight_loyalist_colony
							effect = {
								set_starbase_module = {
									slot = 1
									module = trading_hub
								}
							}
						}
					}

					event_target:lrsk_sublight_loyalist_colony = {
						create_starting_leaders = yes
						country_event = { id = game_start.9 }
						country_event = { id = game_start.33 days = 1 } # needs delay for system ownership to settle
						set_name = random # Fixes some naming issues
						log = "Establishing loyalist country: [this.GetName]"

						add_modifier = { modifier = lrsk_gov_var_empire_colony_red_tape }
						IF = { limit = { event_target:lrsk_sublight_overlord = { has_origin = lrsk_gov_var_origin_sublight_empire } }
							add_modifier = { modifier = lrsk_gov_var_empire_black_box_drives }
							set_subject_of = {
								who = event_target:lrsk_sublight_overlord
								subject_type = lrsk_gov_var_sublight_vassal
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_ftlmn_sublight
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_vasag_sublight
							}
							log = "Detected this is sublight vassal of: [event_target:lrsk_sublight_overlord.GetName]"
						}
						ELSE = {
							set_subject_of = {
								who = event_target:lrsk_sublight_overlord
								subject_type = lrsk_gov_var_sublight_satellite
							}
							add_opinion_modifier = {
								who = event_target:lrsk_sublight_overlord
								modifier = opinion_lrsk_gov_var_satag_sublight
							}
							log = "Detected this is sublight satellite of: [event_target:lrsk_sublight_overlord.GetName]"
						}
						add_opinion_modifier = {
							who = event_target:lrsk_sublight_overlord
							modifier = opinion_lrsk_gov_var_loyal_sublight
						}
						log = "Done with loyalist establishment"
					}
				}			
			}

			# I want to create one more hyperlane out of the home system just in case all direct neighbor systems are taken.
			# This won't guarantee a route out without going through a vassal, but...
			closest_system = {
				limit = {
					has_owner = no
					NOT = { has_hyperlane_to = prev }
				}
				log = "hyperlane thing"
				add_hyperlane = { from = this to = prev }
			}
		} }

		# Set overlord opinions
		IF = { limit = { has_origin = lrsk_gov_var_origin_sublight_empire }
			log = "Adding sublight empire overlord opinion of vassals for [this.GetName]"
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_dissident_colony
				modifier = opinion_lrsk_gov_var_vasol_sublight
			}
			log = "Dissidents: Done."
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_genship_colony
				modifier = opinion_lrsk_gov_var_vasol_sublight
			}
			log = "GenShip: Done."
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_loyalist_colony
				modifier = opinion_lrsk_gov_var_vasol_sublight
			}
			log = "Loyalists: Done."
		}
		ELSE = {
			log = "Adding sublight commonwealth overlord opinion of satellites for [this.GetName]"
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_dissident_colony
				modifier = opinion_lrsk_gov_var_satol_sublight
			}
			log = "Dissidents: Done."
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_genship_colony
				modifier = opinion_lrsk_gov_var_satol_sublight
			}
			log = "GenShip: Done."
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_loyalist_colony
				modifier = opinion_lrsk_gov_var_satol_sublight
			}
			log = "Loyalists: Done."
		}

		# FTL monopoly break
		if = { limit = { has_origin = lrsk_gov_var_origin_sublight_empire }
			event_target:lrsk_sublight_dissident_colony = {
				country_event = {
					id = lrsk_gov_var_sublight_origins.2
					days = 3600
					random = 1800
					# Between 5 and 15 years from start.
				}
			}
			event_target:lrsk_sublight_genship_colony = {
				country_event = {
					id = lrsk_gov_var_sublight_origins.2
					days = 5400
					random = 2520
					# Between 8 and 22 years from start.
				}
			}
			event_target:lrsk_sublight_loyalist_colony = {
				country_event = {
					id = lrsk_gov_var_sublight_origins.2
					days = 7200
					random = 3240
					# Between 11 and 29 years from start.
				}
			}
		}
	}
}

# FTL monopoly break
country_event = {
	id = lrsk_gov_var_sublight_origins.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = lrsk_gov_var_sublight_vassal
		has_modifier = lrsk_gov_var_empire_black_box_drives
	}

	immediate = {
		IF = {
			limit = {
				is_subject_type = lrsk_gov_var_sublight_vassal
				has_modifier = lrsk_gov_var_empire_black_box_drives	
			}
			
			# Haggle over it or take right away
			random_list = {
				40 = {
					modifier = {
						add = -20
						has_origin = lrsk_gov_var_origin_sublight_colony_dis
					}
					modifier = {
						add = 20
						has_origin = lrsk_gov_var_origin_sublight_colony_loy
					}
					modifier = {
						add = 10
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level >= excellent
						}
					}
					modifier = {
						add = 10
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level >= good
						}
					}
					modifier = {
						add = -5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level <= poor
						}
					}
					modifier = {
						add = -5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level <= terrible
						}
					}
					modifier = {
						factor = 0
						NOT = { has_modifier = lrsk_gov_var_empire_colony_red_tape }
						has_modifier = lrsk_gov_var_empire_colony_favors
					}
					# Haggle for lifting of red tape
					event_target:lrsk_sublight_overlord = { country_event = { id = lrsk_gov_var_sublight_origins.5 days = 30 } }
				}
				60 = {
					modifier = {
						add = 20
						has_origin = lrsk_gov_var_origin_sublight_colony_dis
					}
					modifier = {
						add = -20
						has_origin = lrsk_gov_var_origin_sublight_colony_loy
					}
					modifier = {
						add = -10
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level >= excellent
						}
					}
					modifier = {
						add = -10
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level >= good
						}
					}
					modifier = {
						add = 5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level <= poor
						}
					}
					modifier = {
						add = 5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level <= terrible
						}
					}
					# Get FTL
					country_event = { id = lrsk_gov_var_sublight_origins.22 days = 1 }
				}
			}
			# Spread to others
			random_list = {
				# Don't tell
				50 = {
					modifier = {
						factor = 0.5
						has_origin = lrsk_gov_var_origin_sublight_colony_dis
					}
					modifier = {
						factor = 1.5
						has_origin = lrsk_gov_var_origin_sublight_colony_loy
					}
					modifier = {
						add = 10
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level = excellent
						}
					}
					modifier = {
						add = 5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level >= good
						}
					}
					modifier = {
						add = -10
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level <= poor
						}
					}
					modifier = {
						add = -5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level = terrible
						}
					}
					# Do Nothing
				}
				# Tell
				50 = {
					modifier = {
						factor = 1.5
						has_origin = lrsk_gov_var_origin_sublight_colony_dis
					}
					modifier = {
						factor = 0.5
						has_origin = lrsk_gov_var_origin_sublight_colony_loy
					}
					modifier = {
						add = -5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level = excellent
						}
					}
					modifier = {
						add = -10
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level >= good
						}
					}
					modifier = {
						add = 10
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level <= poor
						}
					}
					modifier = {
						add = 5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level = terrible
						}
					}
					switch = {
						trigger = has_origin
						lrsk_gov_var_origin_sublight_colony_loy = {
							event_target:lrsk_sublight_dissident_colony = { country_event = { id = lrsk_gov_var_sublight_origins.3 days = 30 } }
							event_target:lrsk_sublight_genship_colony = { country_event = { id = lrsk_gov_var_sublight_origins.3 days = 30 } }
						}
						lrsk_gov_var_origin_sublight_colony_gsp = {
							event_target:lrsk_sublight_dissident_colony = { country_event = { id = lrsk_gov_var_sublight_origins.3 days = 30 } }
							event_target:lrsk_sublight_loyalist_colony = { country_event = { id = lrsk_gov_var_sublight_origins.3 days = 30 } }
						}
						lrsk_gov_var_origin_sublight_colony_dis = {
							event_target:lrsk_sublight_genship_colony = { country_event = { id = lrsk_gov_var_sublight_origins.3 days = 30 } }
							event_target:lrsk_sublight_loyalist_colony = { country_event = { id = lrsk_gov_var_sublight_origins.3 days = 30 } }
						}
					}
				}
			}
		}
	}
}


# Try getting FTL again (not sure I can recursively call events...
country_event = {
	id = lrsk_gov_var_sublight_origins.21
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = lrsk_gov_var_sublight_vassal
		has_modifier = lrsk_gov_var_empire_black_box_drives
	}

	immediate = {
		IF = {
			limit = {
				is_subject_type = lrsk_gov_var_sublight_vassal
				has_modifier = lrsk_gov_var_empire_black_box_drives	
			}
			country_event = { id = lrsk_gov_var_sublight_origins.2 days = 1 }
		}
	}			

}


# Common logic for gaining FTL
country_event = {
	id = lrsk_gov_var_sublight_origins.22
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = lrsk_gov_var_sublight_vassal
		has_modifier = lrsk_gov_var_empire_black_box_drives
	}

	immediate = {
		IF = {
			limit = {
				is_subject_type = lrsk_gov_var_sublight_vassal
				has_modifier = lrsk_gov_var_empire_black_box_drives	
			}
			# Get FTL, no longer beholden
			remove_modifier = lrsk_gov_var_empire_black_box_drives
			remove_opinion_modifier = {
				who = event_target:lrsk_sublight_overlord
				modifier = opinion_lrsk_gov_var_ftlmn_sublight
			}
			IF = { limit = { NOT = { has_origin = lrsk_gov_var_origin_sublight_colony_loy } }
				IF = { limit = { has_modifier = lrsk_gov_var_empire_colony_red_tape }	# If you've benefitted them in the past, no penalty now that free
					add_opinion_modifier = {
						who = event_target:lrsk_sublight_overlord
						modifier = opinion_lrsk_gov_var_thrall_sublight
					}
				}
				IF = { limit = { has_origin = lrsk_gov_var_origin_sublight_colony_dis }	# Some folks you just can't win with
					add_opinion_modifier = {
						who = event_target:lrsk_sublight_overlord
						modifier = opinion_lrsk_gov_var_ffree_sublight
					}
				}
			}
			set_country_flag = lrsk_sublight_colony_got_FTL

			# Informs overlord
			IF = { limit = { NOT = { has_country_flag = lrsk_sublight_overlord_refused_to_haggle } }
				event_target:lrsk_sublight_overlord = { country_event = { id = lrsk_gov_var_sublight_origins.4 days = 1 } }
			}
		}
	}			

}

# Get FTL from other colony
country_event = {
	id = lrsk_gov_var_sublight_origins.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = lrsk_gov_var_sublight_vassal
		has_modifier = lrsk_gov_var_empire_black_box_drives		
	}

	immediate = {
		IF = {
			limit = {
				is_subject_type = lrsk_gov_var_sublight_vassal
				has_modifier = lrsk_gov_var_empire_black_box_drives		
			}
			add_opinion_modifier = { 
				who = from
				modifier = opinion_lrsk_gov_var_ftlgift_sublight
			}
			random_list = {
				40 = {
					modifier = {
						factor = 0.25
						has_origin = lrsk_gov_var_origin_sublight_colony_dis
					}
					modifier = {
						factor = 1.75
						has_origin = lrsk_gov_var_origin_sublight_colony_loy
					}
					modifier = {
						add = 5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level = excellent
						}
					}
					modifier = {
						add = 5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level >= good
						}
					}
					modifier = {
						factor = 0
						NOT = { has_modifier = lrsk_gov_var_empire_colony_red_tape }
						has_modifier = lrsk_gov_var_empire_colony_favors
					}

					# Haggle for lifting of red tape
					event_target:lrsk_sublight_overlord = { country_event = { id = lrsk_gov_var_sublight_origins.5 days = 30 } }
				}
				60 = {
					modifier = {
						factor = 1.5
						has_origin = lrsk_gov_var_origin_sublight_colony_dis
					}
					modifier = {
						factor = 0.5
						has_origin = lrsk_gov_var_origin_sublight_colony_loy
					}
					modifier = {
						add = 5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level <= poor
						}
					}
					modifier = {
						add = 5
						opinion_level = {
							who = event_target:lrsk_sublight_overlord
							level = terrible
						}
					}
					# Take it
					set_country_flag = lrsk_sublight_colony_took_gifted_FTL
					country_event = { id = lrsk_gov_var_sublight_origins.22 days = 1 }
				}
			}
		}
	}
}

# Notify overlord of FTL
country_event = {
	id = lrsk_gov_var_sublight_origins.4
	title = lrsk_gov_var_sublight_origins.4.name
	#desc = 
	picture = GFX_evt_ship_travel
	#show_sound = event_laboratory_sound
	desc = {
		trigger = {
			from = { NOT = { has_country_flag = lrsk_sublight_colony_took_gifted_FTL } }
		}
		text = lrsk_gov_var_sublight_origins.4.desc.a
	}
	desc = {
		trigger = {
			from = { has_country_flag = lrsk_sublight_colony_took_gifted_FTL }
		}
		text = lrsk_gov_var_sublight_origins.4.desc.b
	}

	is_triggered_only = yes

	trigger = { from = {
		# I hope this prevents this from firing in the event that the sender is independent somehow
		is_subject_type = lrsk_gov_var_sublight_vassal
		has_modifier = lrsk_gov_var_empire_black_box_drives	
	} }

	option = {
		name = lrsk_gov_var_sublight_origins.4.a
		custom_tooltip = lrsk_gov_var_sublight_origins.4.a.tooltip

		add_resource = { influence = -50 }
	}

	option = {
		name = lrsk_gov_var_sublight_origins.4.b
		custom_tooltip = lrsk_gov_var_sublight_origins.4.a.tooltip

		# We haven't done them any favors yet and therefore we are not big mad
		trigger = { from = { OR = {
			has_modifier = lrsk_gov_var_empire_colony_red_tape
			NOT = { has_modifier = lrsk_gov_var_empire_colony_favors }
		} } }

		add_resource = { influence = 100 }

		hidden_effect = {
			# We're not pleased!
			add_opinion_modifier = {
				who = from
				modifier = opinion_lrsk_gov_var_oldire_sublight
			}

			from =  {
				add_modifier = { modifier = lrsk_gov_var_empire_colony_penalty }
				add_opinion_modifier = {
					who = event_target:lrsk_sublight_overlord
					modifier = opinion_lrsk_gov_var_stick_sublight
				}
			}
		}
	}

	option = {
		name = lrsk_gov_var_sublight_origins.4.c
		custom_tooltip = lrsk_gov_var_sublight_origins.4.c.tooltip

		# We haven't done them any favors yet and therefore we are not big mad
		trigger = { from = { OR = {
			has_modifier = lrsk_gov_var_empire_colony_red_tape
			NOT = { has_modifier = lrsk_gov_var_empire_colony_favors }
		} } }

		hidden_effect = {
			#Remove any prior favoritism flag
			every_subject = { limit = { has_country_flag = lrsk_sublight_colony_overlord_favored }
				remove_country_flag = lrsk_sublight_colony_overlord_favored
			}
			from =  {
				add_modifier = { modifier = lrsk_gov_var_empire_colony_favors }
				add_opinion_modifier = {
					who = event_target:lrsk_sublight_overlord
					modifier = opinion_lrsk_gov_var_carrot_sublight
				}
				set_country_flag = lrsk_sublight_colony_overlord_favored
				save_event_target_as = lrsk_sublight_favored_one
			}
			every_subject = {
				# Playing favorites
				country_event = { id = lrsk_gov_var_sublight_origins.44 }
			}
			# Colonial Corruption stuff goes here
		}
	}

	option = {
		name = lrsk_gov_var_sublight_origins.4.d
		custom_tooltip = lrsk_gov_var_sublight_origins.4.d.tooltip

		# We BIG MAD
		trigger = { from = { OR = {
			NOT = { has_modifier = lrsk_gov_var_empire_colony_red_tape }
			has_modifier = lrsk_gov_var_empire_colony_favors
		} } }

		add_resource = { influence = 250 }

		hidden_effect = {
			# This one's just on principle
			add_opinion_modifier = {
				who = from
				modifier = opinion_lrsk_gov_var_oldire_sublight
			}

			from =  {
				save_event_target_as = lrsk_sublight_whipping_boy

				# Red tape is back
				IF = { limit = { NOT = { has_modifier = lrsk_gov_var_empire_colony_red_tape } }
					add_modifier = { modifier = lrsk_gov_var_empire_colony_red_tape }
					
					# Make them hate us
					add_opinion_modifier = {
						who = event_target:lrsk_sublight_overlord
						modifier = opinion_lrsk_gov_var_stick_sublight
					}
					# We hate them too
					event_target:lrsk_sublight_overlord = { add_opinion_modifier = {
						who = event_target:lrsk_sublight_whipping_boy
						modifier = opinion_lrsk_gov_var_oldire_sublight
					} }
				}
				# No more favors
				IF = { limit = { has_modifier = lrsk_gov_var_empire_colony_favors }
					remove_modifier = lrsk_gov_var_empire_colony_favors
					
					# Make them hate us
					add_opinion_modifier = {
						who = event_target:lrsk_sublight_overlord
						modifier = opinion_lrsk_gov_var_stick_sublight
					}
					# We hate them too
					event_target:lrsk_sublight_overlord = { add_opinion_modifier = {
						who = event_target:lrsk_sublight_whipping_boy
						modifier = opinion_lrsk_gov_var_oldire_sublight
					} }
				}
				# Get dunked on
				IF = { limit = { NOT = { has_modifier = lrsk_gov_var_empire_colony_penalty } }
					add_modifier = { modifier = lrsk_gov_var_empire_colony_penalty }
					
					# Make them hate us
					add_opinion_modifier = {
						who = event_target:lrsk_sublight_overlord
						modifier = opinion_lrsk_gov_var_stick_sublight
					}
					# We hate them too
					event_target:lrsk_sublight_overlord = { add_opinion_modifier = {
						who = event_target:lrsk_sublight_whipping_boy
						modifier = opinion_lrsk_gov_var_oldire_sublight
					} }
				}
			}
		}
	}
}

# Playing favorites
country_event = {
	id = lrsk_gov_var_sublight_origins.44
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		IF = { limit = { NOT = { has_country_flag = lrsk_sublight_colony_overlord_favored } }
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_overlord
				modifier = opinion_lrsk_gov_var_favors_sublight
			}
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_favored_one
				modifier = opinion_lrsk_gov_var_stooge_sublight
			}
		}
	}
}

# Subject leadership
country_event = {
	id = lrsk_gov_var_sublight_origins.45
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		IF = { limit = { NOT = { has_country_flag = lrsk_sublight_colony_helped_all } }
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_overlord
				modifier = opinion_lrsk_gov_var_benev_sublight
			}
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_benefactor
				modifier = opinion_lrsk_gov_var_leader_sublight
			}
		}
	}
}

# Haggle over FTL
country_event = {
	id = lrsk_gov_var_sublight_origins.5
	title = lrsk_gov_var_sublight_origins.5.name
	desc = lrsk_gov_var_sublight_origins.5.desc
	picture = GFX_evt_partition
	#show_sound = event_laboratory_sound

	is_triggered_only = yes

	trigger = { from = {
		# I hope this prevents this from firing in the event that the sender is independent somehow
		is_subject_type = lrsk_gov_var_sublight_vassal
		has_modifier = lrsk_gov_var_empire_black_box_drives	
	} }

	option = {
		name = lrsk_gov_var_sublight_origins.5.a
		custom_tooltip = lrsk_gov_var_sublight_origins.5.a.tooltip

		add_resource = { influence = 100 }

		hidden_effect = {
			# We're not pleased!
			add_opinion_modifier = {
				who = from
				modifier = opinion_lrsk_gov_var_oldire_sublight
			}
			from =  {
				set_country_flag = lrsk_sublight_overlord_refused_to_haggle
				add_opinion_modifier = {
					who = event_target:lrsk_sublight_overlord
					modifier = opinion_lrsk_gov_var_stick_sublight
				}
				country_event = { id = lrsk_gov_var_sublight_origins.22 days = 1 }
			}
		}
	}

	option = {
		name = lrsk_gov_var_sublight_origins.5.b
		custom_tooltip = lrsk_gov_var_sublight_origins.5.a.tooltip

		trigger = {
			from = { has_modifier = lrsk_gov_var_empire_colony_red_tape }
		}

		hidden_effect = { from =  {
			remove_modifier = lrsk_gov_var_empire_colony_red_tape
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_overlord
				modifier = opinion_lrsk_gov_var_carrot_sublight
			}
			IF = { limit = { has_modifier = lrsk_gov_var_empire_black_box_drives }
				# They will keep trying, this will come up again... 
				country_event = {
					id = lrsk_gov_var_sublight_origins.21
					days = 3600
					random = 1800
					# Between 5 and 10 years later.						
				}
			}
		} }
	}

	option = {
		name = lrsk_gov_var_sublight_origins.5.c
		custom_tooltip = lrsk_gov_var_sublight_origins.5.c.tooltip

		trigger = {
			from = { NOT = { has_modifier = lrsk_gov_var_empire_colony_red_tape } }
		}

		hidden_effect = { from =  {
			add_modifier = { modifier = lrsk_gov_var_empire_colony_favors }
			add_opinion_modifier = {
				who = event_target:lrsk_sublight_overlord
				modifier = opinion_lrsk_gov_var_carrot_sublight
			}
			IF = { limit = { has_modifier = lrsk_gov_var_empire_black_box_drives }
				# They will keep trying, this will come up again... 
				country_event = {
					id = lrsk_gov_var_sublight_origins.21
					days = 3600
					random = 1800
					# Between 5 and 10 years later.						
				}
			}
		} }
	}
}

# Periodic whining gatekeeper

# Periodic whining event
country_event = {
	id = lrsk_gov_var_sublight_origins.6
	title = lrsk_gov_var_sublight_origins.6.name
	desc = lrsk_gov_var_sublight_origins.6.desc
	picture = GFX_evt_civil_action
	#show_sound = event_laboratory_sound

	is_triggered_only = yes

	trigger = { from = { OR = { 
			# I hope this prevents this from firing in the event that the sender is independent somehow
			is_subject_type = lrsk_gov_var_sublight_vassal
			is_subject_type = lrsk_gov_var_sublight_satellite
	} } }

	immediate = {
		from = { save_event_target_as = lrsk_sublight_petitioner }
	}

	option = {
		name = lrsk_gov_var_sublight_origins.6.a
		custom_tooltip = lrsk_gov_var_sublight_origins.6.a.tooltip

		trigger = {
			#
		}
	
	}

	option = {
		name = lrsk_gov_var_sublight_origins.6.b
		custom_tooltip = lrsk_gov_var_sublight_origins.6.b.tooltip

		trigger = {
			#
		}
	
	}

	option = {
		name = lrsk_gov_var_sublight_origins.6.c
		custom_tooltip = lrsk_gov_var_sublight_origins.6.c.tooltip

		trigger = {
			#
		}
	
	}

	option = {
		name = lrsk_gov_var_sublight_origins.6.d
		custom_tooltip = lrsk_gov_var_sublight_origins.6.d.tooltip

		trigger = {
			#
		}
	
	}

	option = {
		name = lrsk_gov_var_sublight_origins.6.e
		custom_tooltip = lrsk_gov_var_sublight_origins.6.e.tooltip

		trigger = {
			#
		}
	
	}

	option = {
		name = lrsk_gov_var_sublight_origins.6.f
		custom_tooltip = lrsk_gov_var_sublight_origins.6.f.tooltip

		trigger = {
			#
		}
	
	}

	option = {
		name = lrsk_gov_var_sublight_origins.6.g
		custom_tooltip = lrsk_gov_var_sublight_origins.6.g.tooltip

		trigger = {
			#
		}
	
	}

	option = {
		name = lrsk_gov_var_sublight_origins.6.h
		custom_tooltip = lrsk_gov_var_sublight_origins.6.h.tooltip

		trigger = {
			#
		}
	
	}
}

# Housekeeping (Bi-Yearly):
# 1) If a sublight colony becomes independent of the player, they should lose thier nerf modifiers.
# 2) If a sublight colony under the player somehow loses red tape when they should have it, return red tape.
# 3) If a sublight colony under the player somehow becomes some other kind of vassal prior to reforms, return to proper type.
country_event = {
	id = lrsk_gov_var_sublight_origins.100
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			has_origin = lrsk_gov_var_origin_sublight_colony_loy
			has_origin = lrsk_gov_var_origin_sublight_colony_gsp
			has_origin = lrsk_gov_var_origin_sublight_colony_dis
		}
		NOR = {
			is_subject_type = lrsk_gov_var_sublight_vassal
			is_subject_type = lrsk_gov_var_sublight_satellite
		}
	}

	immediate = {
		#Want to be able to refer to this unambiguously
		save_event_target_as = lrsk_sublight_item_of_business
		set_country_flag = lrsk_sublight_being_dealt_with

		# Check if player is still overlord
		event_target:lrsk_sublight_overlord = {
			IF = { limit = { any_subject = { has_country_flag = lrsk_sublight_being_dealt_with } }
				event_target:lrsk_sublight_item_of_business = { set_country_flag = lrsk_sublight_still_player_vassal }
			}
		}

		IF = { limit = { NOT = { has_country_flag = lrsk_sublight_still_player_vassal } }
			IF = { limit = { has_modifier = lrsk_gov_var_empire_black_box_drives } remove_modifier = lrsk_gov_var_empire_black_box_drives }
			IF = { limit = { has_modifier = lrsk_gov_var_empire_colony_red_tape } remove_modifier = lrsk_gov_var_empire_colony_red_tape }
		}
		ELSE = {
			IF = {
				limit = { NOR = {
					has_modifier = lrsk_gov_var_empire_colony_red_tape
					has_country_flag = lrsk_sublight_overloard_cut_our_red_tape
					event_target:lrsk_sublight_overlord = { NOR = {
						has_country_flag = lrsk_sublight_overloard_abolished_redtape
						has_country_flag = lrsk_sublight_overloard_colonial_system_reformed
					} }
				} }
				add_modifier = { modifier = lrsk_gov_var_empire_colony_red_tape }
			}
			IF = { 
				limit = { NOR = {					
					is_subject_type = lrsk_gov_var_sublight_vassal
					is_subject_type = lrsk_gov_var_sublight_satellite
					event_target:lrsk_sublight_overlord = { has_country_flag = lrsk_sublight_overloard_colonial_system_reformed }
				} }
				save_event_target_as = lrsk_sublight_colony_to_reintegrate
				event_target:lrsk_sublight_overlord = { switch = {
					trigger = has_origin
					lrsk_gov_var_origin_sublight_empire = {
						event_target:lrsk_sublight_colony_to_reintegrate = { set_subject_of = {
							who = event_target:lrsk_sublight_overlord
							subject_type = lrsk_gov_var_sublight_vassal
						} }
					}
					lrsk_gov_var_origin_sublight_commonwealth = {
						event_target:lrsk_sublight_colony_to_reintegrate = { set_subject_of = {
							who = event_target:lrsk_sublight_overlord
							subject_type = lrsk_gov_var_sublight_satellite
						} }
					}
				} }
			}
		}

		remove_country_flag = lrsk_sublight_being_dealt_with
		IF = { limit = { has_country_flag = lrsk_sublight_still_player_vassal }
			remove_country_flag = lrsk_sublight_still_player_vassal
		}
	}
}

## Colonial Corruption
#country_event = {
#	id = lrsk_gov_var_sublight_origins.200
#	hide_window = yes
#	is_triggered_only = yes
#
#	trigger = {
#		#
#	}
#
#	immediate = {
#		#
#	}
#}