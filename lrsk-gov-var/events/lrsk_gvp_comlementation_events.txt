# Government Variety Pack
# Events - Complementation Project
# Author: littleraskol

namespace = lrsk_gvp_complementation

# Starting setup
country_event = {
	id = lrsk_gvp_complementation.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_origin = lrsk_gvp_origin_complementation_project
	}

	immediate = {
		# Add the "Unity of Purpose" tech
		give_technology = { message = no tech = tech_unity_of_purpose }

		# Place "Complementation Nexus Ruins" deposit
		capital_scope ={
			set_planet_flag = lrsk_gvp_complementation_capital

			add_deposit = d_lrsk_gvp_compl_project_ruins

			# remove standard hive blockers
			if = { limit = { has_deposit = d_collapsed_burrows } remove_deposit = d_collapsed_burrows }
			if = { limit = { has_deposit = d_failing_infrastructure } remove_deposit = d_failing_infrastructure }
			if = { limit = { has_deposit = d_failing_infrastructure } remove_deposit = d_failing_infrastructure }

			add_deposit = d_lrsk_gvp_compl_singleton_hideout
			add_deposit = d_lrsk_gvp_compl_final_battlefield
			add_deposit = d_lrsk_gvp_compl_bleak_ruins
			add_deposit = d_lrsk_gvp_compl_mystery_vault
		}

		# Semi-immediate check that some other mod did not remove the deposit
		country_event = {
			id = lrsk_government_variety_pack_backend.2
			days = 2
		}

		# Derive "original" (non-hive) species from main species (used in several places)
		owner_main_species = {
			modify_species = {
				species = this
				remove_trait = trait_hive_mind
				change_scoped_species = no

				effect = {
					set_species_flag = lrsk_singleton_original_species_of@root
					save_event_target_as = lrsk_compl_remnant_species
				}
			}
		}

		# Spawn remnants
		country_event = { id = lrsk_gvp_complementation.2 }
	}
}

# Spawn remnants
country_event = {
	id = lrsk_gvp_complementation.2

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = lrsk_gvp_origin_complementation_project
	}

	immediate = {
		# Mark every unowned, empty system at least 5 jumps away (not in a starting cluster) with a planet root can settle.
		every_system = {
			limit = {
				distance_to_empire = {
					who = root
					distance > 4
				}
				lrsk_safe_to_colonize_system = yes
				NOT = { has_star_flag = empire_cluster }
				root = {
					owner_main_species = {
						prevprev = {
							any_system_planet = {
								lrsk_safe_to_colonize_planet = yes
								habitability = {
									who = prevprev
									value >= 0.5
								}
							}
						}
					}
				}
			}
			star = { set_timed_planet_flag = {
				flag = lrsk_compl_possible_refuge_system
				days = 2
			} }
			every_system_planet = {
				limit = {
					lrsk_safe_to_colonize_planet = yes
					root = {
						owner_main_species = {
							prevprev = {
								habitability = {
									who = prev
									value >= 0.5
								}
							}
						}
					}
				}
				set_timed_planet_flag = {
					flag = lrsk_compl_possible_refuge_world
					days = 2
				}
				root = { lrsk_add_country_flag = { FLAG = lrsk_compl_found_a_refuge_planet } }		
			}
		}

		# Final sanity check: if we somehow don't have any possible refuge planets, don't continue.
		if = { limit = { has_country_flag = lrsk_compl_found_a_refuge_planet }
			remove_country_flag =  lrsk_compl_found_a_refuge_planet
			
			# Pick the destination planet
			closest_system = {
				limit = { star = { has_planet_flag = lrsk_compl_possible_refuge_system } }
				save_event_target_as = lrsk_compl_refuge_star
				
				random_system_planet = {
					limit = { has_planet_flag = lrsk_compl_possible_refuge_world }
					save_event_target_as = lrsk_compl_refuge_world
				}
			}
			
			# Create the remnant empire
			create_country = {
				name = random
				name_list = random
				species = event_target:lrsk_compl_remnant_species
				type = default
				origin = lrsk_gvp_origin_complementation_remnants
				ignore_initial_colony_error = yes
				day_zero_contact = no
				ethos = random
				authority = random
				civics = random
				effect = {
					save_event_target_as = lrsk_compl_remnant_empire
				}
			}

			event_target:lrsk_compl_refuge_world = {
				create_colony = {
					owner = event_target:lrsk_compl_remnant_empire
				}

				add_building = building_colony_shelter

				solar_system = {
					create_starbase = {
						size = starbase_starport
						module = shipyard
						building = crew_quarters
						owner = event_target:lrsk_compl_remnant_empire
						effect = {
							set_starbase_module = {
								slot = 1
								module = trading_hub
							}
						}
					}
				}

				# Create 3 pops... not many because they're struggling remnants
				while = { count = 3					
					create_pop = {
						species = event_target:lrsk_compl_remnant_species
						ethos = event_target:lrsk_compl_remnant_empire
					}
				}
			}
			
			event_target:lrsk_compl_remnant_empire = {
				create_starting_leaders = yes
				country_event = { id = game_start.9 }
				set_name = random # Fixes some naming issues
				set_relation_flag = {
					who = root
					flag = lrsk_compl_fled_assimilation_from
				}
				set_country_flag = lrsk_compl_fled_from@root

				#Resource boosts to make them a contender
				add_resource = {
					unity = 500
					food = 500
					minerals = 500
					energy = 500
				}
			}
		}
		else = {
			log_error = "Tried making complementation remnants for [root.GetName], could not find planet to host them."
		}
	}
}

# Create original species pops
planet_event = {
	id = lrsk_gvp_complementation.20 # number idk

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		check_variable = {
			which = lrsk_num_pops_to_add
			value > 0
		}
	}

	immediate = {
		while = {
			limit = {
				check_variable = {
					which = lrsk_num_pops_to_add
					value > 0
				}
			}
			create_pop = {
				species = event_target:lrsk_compl_remnant_species
			}
			subtract_variable = {
				which = lrsk_num_pops_to_add
				value = 1
			}
		}
	}
}

# Apply Complementation to Singleton Pops on Yearly Pulse
country_event = {
	id = lrsk_gvp_complementation.30	# number idk
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = lrsk_gvp_origin_complementation_project
		num_unique_species > 1
		any_owned_species = {
			has_citizenship_type = {
				type = citizenship_lrsk_complementation
				country = root
			}
		}
	}

	immediate = {
		set_update_modifiers_batch = begin

		every_owned_species = {
			limit = {
				has_citizenship_type = {
					type = citizenship_lrsk_complementation
					country = root
				}
			}
			modify_species = {
				species = this
				add_trait = trait_hive_mind
				remove_trait = trait_self_modified
				remove_trait = trait_latent_psionic
				remove_trait = trait_psionic
				change_scoped_species = no

				effect = {
					set_timed_species_flag = {
						flag = lrsk_complementation_species_of_species@prev
						days = 30
					}
					set_timed_species_flag = {
						flag = lrsk_complementation_species_of_empire@root
						days = 30
					}
					#save_event_target_as = lrsk_convert_to_species
				}
			}
		}

		every_owned_planet = {
			planet_event = { id = lrsk_gvp_complementation.31 }
		}
		set_update_modifiers_batch = end
	}
}

# Complement Pops
planet_event = {
	id = lrsk_gvp_complementation.31
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_pop = {
			has_citizenship_type = {
				type = citizenship_lrsk_complementation
				country = root.owner
			}
		}
	}

	# Credit to corsairmarks for the algorithm
	immediate = {
		# Set relevant counting variables to double the number of typical pops this should complement (most pops "cost" 2, originals "cost" 1).
		random_list = {
			1 = { set_variable = { which = lrsk_comlementation_counter value = 4 } }	# 2 pops (up to 4 original)
			1 = { set_variable = { which = lrsk_comlementation_counter value = 8 } }	# 4 pops (up to 8 original)
			1 = { set_variable = { which = lrsk_comlementation_counter value = 16 } }	# 8 pops (up to 16 original)
		}
		
		# TBD: If planet has a Complementation Nexus, increase the variable
		
		while = {
			limit = {
				any_owned_pop = {
					has_citizenship_type = {
						type = citizenship_lrsk_complementation
						country = root.owner
					}
				}
				check_variable = {
					which = lrsk_comlementation_counter
					value > 0
				}
			}
			lrsk_complementation_effect = yes
		}
		clear_variable = lrsk_comlementation_counter
	}
}
