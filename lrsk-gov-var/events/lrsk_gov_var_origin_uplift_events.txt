# Government Variety Pack
# Events - Uplift Origin
# Author: littleraskol

namespace = lrsk_gov_var_uplift

# Setup traits, etc.
country_event = {
	id = lrsk_gov_var_uplift.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = lrsk_gov_var_origin_uplift
	}

	immediate = {
		set_country_flag = lrsk_gov_var_uplift_nation
		set_country_flag = first_contact_event
		set_country_flag = Story2 # Already encountered spacefarers

		# Swap traits out. For non-hive organics, we want the species to have the actual presapient traits for job weighting purposes.
		# Sadly, there is little we can do for mod-added traits without editing job definitions... 
		# ...but all pops get these, the problem is immigration which is an edge case for gestalts tbh.
		# If the "enlightened" trait or no trait is taken, swap it out for/give the "enlightened" empire modifier.
		IF = { limit = { is_gestalt = yes }
			IF = { limit = { has_authority = auth_hive_mind }
				owner_species = { switch = {
					trigger = has_trait
					lrsk_gov_var_trait_starborn_hive = {
						root = {
							set_country_flag = lrsk_gov_var_uplift_no_trait_swap
							set_country_flag = lrsk_gov_var_uplift_has_valid_trait
						}
					}
					lrsk_gov_var_trait_earthbound_hive = {
						root = {
							set_country_flag = lrsk_gov_var_uplift_no_trait_swap
							set_country_flag = lrsk_gov_var_uplift_has_valid_trait
						}
					}
					lrsk_gov_var_trait_proles_hive = {
						root = {
							set_country_flag = lrsk_gov_var_uplift_no_trait_swap
							set_country_flag = lrsk_gov_var_uplift_has_valid_trait
						}
					}
					lrsk_gov_var_trait_enlightened_hive = {
						root = {
							every_owned_pop = {
								limit = { pop_has_trait = lrsk_gov_var_trait_enlightened_hive }
								modify_species = {
									species = this
									remove_trait = lrsk_gov_var_trait_enlightened_hive
								}
								species = { save_event_target_as = lrsk_gov_var_new_uplift_species }
							}
							set_country_flag = lrsk_gov_var_uplift_enlighten
						}
					}
					default = { root = { set_country_flag = lrsk_gov_var_uplift_no_trait_swap } }
				} }
				
				IF = {
					limit = { OR = { 
						has_country_flag = lrsk_gov_var_uplift_enlighten
						NOT = { has_country_flag = lrsk_gov_var_uplift_has_valid_trait }
					} }
					add_modifier = { modifier = lrsk_gov_var_empire_enlightened_hive }
				}
				
				IF = {
					limit = { NOT = { has_country_flag = lrsk_gov_var_uplift_no_trait_swap } }
					change_dominant_species = {
						species = event_target:lrsk_gov_var_new_uplift_species
						change_all = yes
					}
				}
			}
			ELSE = {
				owner_species = { switch = {
					trigger = has_trait
					lrsk_gov_var_trait_natural_intellectuals_mech = {
						root = {
							set_country_flag = lrsk_gov_var_uplift_no_trait_swap
							set_country_flag = lrsk_gov_var_uplift_has_valid_trait
						}
					}
					lrsk_gov_var_trait_proles_mech = {
						root = {
							set_country_flag = lrsk_gov_var_uplift_no_trait_swap
							set_country_flag = lrsk_gov_var_uplift_has_valid_trait
						}
					}
					lrsk_gov_var_trait_conservative_mech = {
						root = {
							set_country_flag = lrsk_gov_var_uplift_no_trait_swap
							set_country_flag = lrsk_gov_var_uplift_has_valid_trait
						}
					}
					lrsk_gov_var_trait_enlightened_mech = {
						root = {
							every_owned_pop = {
								limit = { pop_has_trait = lrsk_gov_var_trait_enlightened_mech }
								modify_species = {
									species = this
									remove_trait = lrsk_gov_var_trait_enlightened_mech
								}
								species = { save_event_target_as = lrsk_gov_var_new_uplift_species }
							}
							set_country_flag = lrsk_gov_var_uplift_enlighten
						}
					}
					default = { root = { set_country_flag = lrsk_gov_var_uplift_no_trait_swap } }
				} }
				
				IF = {
					limit = { OR = { 
						has_country_flag = lrsk_gov_var_uplift_enlighten
						NOT = { has_country_flag = lrsk_gov_var_uplift_has_valid_trait }
					} }
					add_modifier = { modifier = lrsk_gov_var_empire_enlightened_mech }
				}
				
				IF = {
					limit = { NOT = { has_country_flag = lrsk_gov_var_uplift_no_trait_swap } }
					change_dominant_species = {
						species = event_target:lrsk_gov_var_new_uplift_species
						change_all = yes
					}
				}
			}
		}
		ELSE = {
			owner_species = { switch = {
				trigger = has_trait
				lrsk_gov_var_trait_starborn = {
					root = {
						every_owned_pop = {
							limit = { pop_has_trait = lrsk_gov_var_trait_starborn }
							modify_species = {
								species = this
								remove_trait = lrsk_gov_var_trait_starborn
								add_trait = trait_presapient_starborn
							}
							species = { save_event_target_as = lrsk_gov_var_new_uplift_species }
						}
					}
				}
				lrsk_gov_var_trait_earthbound = {
					root = {
						every_owned_pop = {
							limit = { pop_has_trait = lrsk_gov_var_trait_earthbound }
							modify_species = {
								species = this
								remove_trait = lrsk_gov_var_trait_earthbound
								add_trait = trait_presapient_earthbound
							}
							species = { save_event_target_as = lrsk_gov_var_new_uplift_species }
						}
					}
				}
				lrsk_gov_var_trait_natural_intellectuals = {
					root = {
						every_owned_pop = {
							limit = { pop_has_trait = lrsk_gov_var_trait_natural_intellectuals }
							modify_species = {
								species = this
								remove_trait = lrsk_gov_var_trait_natural_intellectuals
								add_trait = trait_presapient_natural_intellectuals
							}
							species = { save_event_target_as = lrsk_gov_var_new_uplift_species }
						}
					}
				}
				lrsk_gov_var_trait_proles = {
					root = {
						every_owned_pop = {
							limit = { pop_has_trait = lrsk_gov_var_trait_proles }
							modify_species = {
								species = this
								remove_trait = lrsk_gov_var_trait_proles
								add_trait = trait_presapient_proles
							}
							species = { save_event_target_as = lrsk_gov_var_new_uplift_species }
						}
					}
				}
				lrsk_gov_var_trait_conservative = {
					root = {
						every_owned_pop = {
							limit = { pop_has_trait = lrsk_gov_var_trait_conservative }
							modify_species = {
								species = this
								remove_trait = lrsk_gov_var_trait_conservative
								add_trait = trait_presapient_conservative
							}
							species = { save_event_target_as = lrsk_gov_var_new_uplift_species }
						}
					}
				}
				lrsk_gov_var_trait_enlightened = {
					root = {
						every_owned_pop = {
							limit = { pop_has_trait = lrsk_gov_var_trait_enlightened }
							modify_species = {
								species = this
								remove_trait = lrsk_gov_var_trait_enlightened
							}
							species = { save_event_target_as = lrsk_gov_var_new_uplift_species }
						}
						set_country_flag = lrsk_gov_var_uplift_enlighten
					}
				}
				default = { root = { set_country_flag = lrsk_gov_var_uplift_no_trait_swap } }
			} }
			
			IF = {
				limit = { OR = { 
					has_country_flag = lrsk_gov_var_uplift_enlighten
					has_country_flag = lrsk_gov_var_uplift_no_trait_swap
				} }
				add_modifier = { modifier = lrsk_gov_var_empire_enlightened }
			}
			
			IF = {
				limit = { NOT = { has_country_flag = lrsk_gov_var_uplift_no_trait_swap } }
				change_dominant_species = {
					species = event_target:lrsk_gov_var_new_uplift_species
					change_all = yes
				}
			}
		}

		#Spawn tutor - not working like this, oh well...
		#this.capital_scope.solar_system = {
		#	random_system = {
		#		limit = {
		#			has_owner = no
		#			distance = {
		#				source = prev
		#				#min_jumps = 3
		#				#max_jumps = 5
		#				min_distance <= 200
		#			}
		#			NOT = { has_star_flag = empire_cluster }
		#		}
		#		spawn_system = { initializer = "lrsk_uplift_1" } 
		#	}
		#}
	}
}


# Tutor system finalizations and watchpost system
country_event = {
	id = lrsk_gov_var_uplift.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = lrsk_gov_var_origin_uplift
	}

	immediate = {
		random_country = {
			limit = { has_country_flag = lrsk_uplift_tutor }
			save_event_target_as = lrsk_my_uplift_tutor
			if = {
				limit = { this = { ideal_planet_class = pc_arid } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_arid
				}
			}
			else_if = {
				limit = { this = { ideal_planet_class = pc_desert } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_desert
				}
			}
			else_if = {
				limit = { this = { ideal_planet_class = pc_tropical } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_tropical
				}
			}
			else_if = {
				limit = { this = { ideal_planet_class = pc_continental } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_continental
				}
			}
			else_if = {
				limit = { this = { ideal_planet_class = pc_ocean } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_ocean
				}
			}
			else_if = {
				limit = { this = { ideal_planet_class = pc_tundra } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_tundra
				}
			}
			else_if = {
				limit = { this = { ideal_planet_class = pc_arctic } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_arctic
				}
			}
			else_if = {
				limit = { this = { ideal_planet_class = pc_alpine } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_alpine
				}
			}
			else_if = {
				limit = { this = { ideal_planet_class = pc_savannah } }
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_savannah
				}
			}
			#This is a fallback in case of mod-added or other unexpected planet types.
			else = {
				every_owned_pop = {
					modify_species = {
						species = this
						ideal_planet_class = pc_continental
					}
					species = { save_event_target_as = lrsk_gov_var_new_uplift_tutor_species }
				}
				change_dominant_species = {
					species = event_target:lrsk_gov_var_new_uplift_tutor_species
					change_all = yes
				}
				every_owned_planet = {
					limit = { has_planet_flag = lrsk_uplift_tutor_planet }
					change_pc = pc_continental
				}
			}
			every_owned_planet = {
				limit = {  has_planet_flag = lrsk_uplift_tutor_colony }
				planet_event = { id = game_start.21 }
				planet_event = { id = game_start.22 }
				planet_event = { id = game_start.23 }
			}
			country_event = { id = game_start.6 } #Advanced empire buffs
		}

		this.capital_scope.solar_system = {
			closest_system = {
				limit = {
					any_system_planet = { habitable_planet = no }
					has_owner = no
				}
			
				create_starbase = {
					#name = "Pupil Watchpost"
					size = starbase_starport
					#module = shipyard
					building = listening_post
					owner = event_target:lrsk_my_uplift_tutor
					effect = {
						set_starbase_module = {
							slot = 1
							module = shipyard
						}
						set_starbase_module = {
							slot = 2
							module = trading_hub
						}
					}
				}
				star = { save_event_target_as = lrsk_uplift_watchpost_star }
				create_fleet = {
					name = "Overwatch Squadron"
					effect = {
						set_owner = event_target:lrsk_my_uplift_tutor

						while = {
							count = 4
							create_ship = {
								name = random
								random_existing_design = corvette
							}
						}

						set_location = {
							target = event_target:lrsk_uplift_watchpost_star
							distance = 20
							angle = random
						}
					}
				}
			}
		}
	}
}



