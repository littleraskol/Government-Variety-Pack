# Government Variety Pack
# Scripted Effects
# Author: littleraskol

# Create Tradeways NPC empire w/ Merchant Guilds.
lrsk_create_tradeways_member_mg = {
	random_list = {
		1 = {
			modifier = {
				factor = 0
				root = { is_pacifist = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_pacifist }
			}
			create_country = {
				name = random
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_pacifist
					ethic = ethic_fanatic_pacifist
				}
				civics = {
					civic = civic_merchant_guilds
					civic = random
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_materialist = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_materialist }
			}
			create_country = {
				name = random
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_materialist
					ethic = ethic_fanatic_materialist
				}
				civics = {
					civic = civic_merchant_guilds
					civic = random
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_spiritualist = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_spiritualist }
			}
			create_country = {
				name = random
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_spiritualist
					ethic = ethic_fanatic_spiritualist
				}
				civics = {
					civic = civic_merchant_guilds
					civic = random
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_militarist = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_militarist }
			}
			create_country = {
				name = random
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_militarist
					ethic = ethic_fanatic_militarist
				}
				civics = {
					civic = civic_merchant_guilds
					civic = random
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_authoritarian = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_authoritarian }
			}
			create_country = {
				name = random
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_authoritarian
					ethic = ethic_fanatic_authoritarian
				}
				civics = {
					civic = civic_merchant_guilds
					civic = random
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_egalitarian = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_egalitarian }
			}
			create_country = {
				name = random
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_egalitarian
					ethic = ethic_fanatic_egalitarian
				}
				civics = {
					civic = civic_merchant_guilds
					civic = random
				}
			}
		}
		1 = {
			# This will only happen with mod-added ethics. There's a limit to how much I can accomodate that!
			modifier = {
				factor = 0
				root = { OR = {
					is_pacifist = yes
					is_materialist = yes
					is_spiritualist = yes
					is_militarist = yes
					is_authoritarian = yes
					is_egalitarian = yes
				} }
			}
			create_country = {
				name = random
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				ethos = root
				civics = {
					civic = civic_merchant_guilds
					civic = random
				}
			}
		}
	}
}


# Create Tradeways NPC empire w/ Corp authority.
lrsk_create_tradeways_member_mc = {
	random_list = {
		1 = {
			modifier = {
				factor = 0
				root = { is_pacifist = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_pacifist }
			}
			create_country = {
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_mc_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = auth_corporate
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_pacifist
					ethic = ethic_fanatic_pacifist
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_materialist = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_materialist }
			}
			create_country = {
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_mc_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = auth_corporate
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_materialist
					ethic = ethic_fanatic_materialist
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_spiritualist = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_spiritualist }
			}
			create_country = {
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_mc_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = auth_corporate
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_spiritualist
					ethic = ethic_fanatic_spiritualist
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_militarist = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_militarist }
			}
			create_country = {
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_mc_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = auth_corporate
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_militarist
					ethic = ethic_fanatic_militarist
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_authoritarian = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_authoritarian }
			}
			create_country = {
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_mc_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = auth_corporate
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_authoritarian
					ethic = ethic_fanatic_xenophile
				}
			}
		}
		1 = {
			modifier = {
				factor = 0
				root = { is_egalitarian = no }
			}
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_egalitarian }
			}
			create_country = {
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_mc_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = auth_corporate
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_egalitarian
					ethic = ethic_fanatic_xenophile
				}
			}
		}
		1 = {
			# This will only happen with mod-added ethics. There's a limit to how much I can accomodate that!
			modifier = {
				factor = 0
				root = { OR = {
					is_pacifist = yes
					is_materialist = yes
					is_spiritualist = yes
					is_militarist = yes
					is_authoritarian = yes
					is_egalitarian = yes
				} }
			}
			create_country = {
				name_list = random
				species = event_target:lrsk_next_fed_planet_species
				type = default
				origin = lrsk_gov_var_origin_tradeways_mc_npc
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = auth_corporate
				randomize_ethos = yes
				ethos = {
					ethic = ethic_xenophile
					ethic = ethic_fanatic_xenophile
				}
			}
		}
	}
}

# Refreshes event tagets for sublight subjects in current context
# CONTEXT: country scope, if caller has no subjects or no subjects that are sublight colonies this does nothing
lrsk_gov_var_sublight_subjects_mark = {
	every_subject = {
		switch = {
			trigger = has_origin
			lrsk_gov_var_origin_sublight_colony_loy = { save_event_target_as = lrsk_sublight_loyalist_colony }
			lrsk_gov_var_origin_sublight_colony_gsp = { save_event_target_as = lrsk_sublight_genship_colony }
			lrsk_gov_var_origin_sublight_colony_dis = { save_event_target_as = lrsk_sublight_dissident_colony }
		}
	}
}

# Random good trait for mil leaders
lrsk_add_random_good_leader_trait = {
	if = {
		limit = {
			leader_class = admiral
			NOT = { has_leader_flag = has_gained_trait } # JIC
		}

		log = "Granting random good admiral trait"
		
		random_list = {
			20 = {
				modifier = {
					factor = 0
					OR = {
						has_trait = leader_trait_adaptable
						has_trait = leader_trait_flexible_programming
						has_trait = leader_trait_rigid_programming
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_authority = auth_machine_intelligence }
						}
					}
					add_trait = leader_trait_adaptable
					set_timed_leader_flag = { flag = gained_leader_trait_adaptable days = 7 }
				}
				if = {
					limit = {
						owner = { has_authority = auth_machine_intelligence }
					}
					add_trait = leader_trait_flexible_programming
					set_timed_leader_flag = { flag = gained_leader_trait_flexible_programming days = 7 }
				}
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					OR = {
						has_trait = leader_trait_resilient
						owner = { has_ethic = ethic_gestalt_consciousness }
						species = { has_trait = trait_mechanical }
					}
				}
				add_trait = leader_trait_resilient
				set_timed_leader_flag = { flag = gained_leader_trait_resilient days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					has_trait = leader_trait_trickster
				}
				add_trait = leader_trait_trickster
				set_timed_leader_flag = { flag = gained_leader_trait_trickster days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					OR = {
						has_trait = leader_trait_fleet_logistician
						has_trait = leader_trait_maintenance_loop
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_authority = auth_machine_intelligence }
						}
					}
					add_trait = leader_trait_fleet_logistician
					set_timed_leader_flag = { flag = gained_leader_trait_fleet_logistician days = 7 }
				}
				if = {
					limit = {
						owner = { has_authority = auth_machine_intelligence }
					}
					add_trait = leader_trait_maintenance_loop
					set_timed_leader_flag = { flag = gained_leader_trait_maintenance_loop days = 7 }
				}
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					has_trait = leader_trait_engineer
				}
				add_trait = leader_trait_engineer
				set_timed_leader_flag = { flag = gained_leader_trait_engineer days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					has_trait = leader_trait_aggressive
				}
				add_trait = leader_trait_aggressive
				set_timed_leader_flag = { flag = gained_leader_trait_aggressive days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					has_trait = leader_trait_cautious
				}
				add_trait = leader_trait_cautious
				set_timed_leader_flag = { flag = gained_leader_trait_cautious days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					has_trait = leader_trait_scout
				}
				add_trait = leader_trait_scout
				set_timed_leader_flag = { flag = gained_leader_trait_scout days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					has_trait = leader_trait_unyielding
				}
				add_trait = leader_trait_unyielding
				set_timed_leader_flag = { flag = gained_leader_trait_unyielding days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					has_trait = leader_trait_gale_speed
				}
				add_trait = leader_trait_gale_speed
				set_timed_leader_flag = { flag = gained_leader_trait_gale_speed days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			1 = {
				# think we need a null chance as a default
			}
		}

		IF = {
			limit = {
				has_leader_flag = has_gained_trait				
				has_level > 1 # Only show message on levelup.
			}
			save_event_target_as = lrsk_leader_to_levelup # JIC
			owner = { country_event = { id = lrsk_gvp_mc_bldg_special.12 } }
		}
	}

	if = {
		limit = {
			leader_class = general
			NOT = { has_leader_flag = has_gained_trait } # JIC
		}

		log = "Granting random good general trait"

		random_list = {
			20 = {
				modifier = {
					factor = 0
					OR = {
						has_trait = leader_trait_adaptable
						has_trait = leader_trait_flexible_programming
						has_trait = leader_trait_rigid_programming
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_authority = auth_machine_intelligence }
						}
					}
					add_trait = leader_trait_adaptable
					set_timed_leader_flag = { flag = gained_leader_trait_adaptable days = 7 }
				}
				if = {
					limit = {
						owner = { has_authority = auth_machine_intelligence }
					}
					add_trait = leader_trait_flexible_programming
					set_timed_leader_flag = { flag = gained_leader_trait_flexible_programming days = 7 }
				}
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					OR = {
						has_trait = leader_trait_resilient
						owner = { has_ethic = ethic_gestalt_consciousness }
						species = { has_trait = trait_mechanical }
					}
				}
				add_trait = leader_trait_resilient
				set_timed_leader_flag = { flag = gained_leader_trait_resilient days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					OR = {
						owner = { has_authority = auth_machine_intelligence }
						has_trait = leader_trait_butcher
						has_trait = leader_trait_restrained
					}
				}
				add_trait = leader_trait_restrained
				set_timed_leader_flag = { flag = gained_leader_trait_restrained days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					OR = {
						has_trait = leader_trait_charismatic
						has_trait = leader_trait_demoralizer
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_authority = auth_machine_intelligence }
						}
					}
					add_trait = leader_trait_charismatic
					set_timed_leader_flag = { flag = gained_leader_trait_charismatic days = 7 }
				}
				if = {
					limit = {
						owner = { has_authority = auth_machine_intelligence }
					}
					add_trait = leader_trait_demoralizer
					set_timed_leader_flag = { flag = gained_leader_trait_demoralizer days = 7 }
				}
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					OR = {
						has_trait = leader_trait_butcher
						has_trait = leader_trait_restrained
					}
				}
				add_trait = leader_trait_butcher
				set_timed_leader_flag = { flag = gained_leader_trait_butcher days = 7 }
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					OR = {
						has_trait = leader_trait_glory_seeker
						has_trait = leader_trait_demoralizer
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_authority = auth_machine_intelligence }
						}
					}
					add_trait = leader_trait_glory_seeker
					set_timed_leader_flag = { flag = gained_leader_trait_glory_seeker days = 7 }
				}
				if = {
					limit = {
						owner = { has_authority = auth_machine_intelligence }
					}
					add_trait = leader_trait_demoralizer
					set_timed_leader_flag = { flag = gained_leader_trait_demoralizer days = 7 }
				}
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			20 = {
				modifier = {
					factor = 0
					OR = {
							has_trait = leader_trait_army_logistician
							has_trait = leader_trait_parts_cannibalizer
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_authority = auth_machine_intelligence }
						}
					}
					add_trait = leader_trait_army_logistician
					set_timed_leader_flag = { flag = gained_leader_trait_army_logistician days = 7 }
				}
				if = {
					limit = {
						owner = { has_authority = auth_machine_intelligence }
					}
					add_trait = leader_trait_parts_cannibalizer
					set_timed_leader_flag = { flag = gained_leader_trait_parts_cannibalizer days = 7 }
				}
				set_timed_leader_flag = { flag = has_gained_trait days = 7 }
			}
			1 = {
				# think we need a null chance as a default
			}
		}

		IF = {
			limit = {
				has_leader_flag = has_gained_trait				
				has_level > 1 # Only show message on levelup.
			}
			save_event_target_as = lrsk_leader_to_levelup # JIC
			owner = { country_event = { id = lrsk_gvp_mc_bldg_special.12 } }
		}
	}
}

# Removes all wild cults (planet scope)
lrsk_gvp_remove_every_wild_cult = {
	while = {
		limit = { lrsk_gvp_planet_has_no_wild_cult = no }
		switch = {
			trigger = has_modifier
			lrsk_gov_var_statmod_divine_right_cult = { remove_modifier = lrsk_gov_var_statmod_divine_right_cult }
			lrsk_gov_var_statmod_children_of_heaven_cult = { remove_modifier = lrsk_gov_var_statmod_children_of_heaven_cult }
			lrsk_gov_var_statmod_holy_war_cult = { remove_modifier = lrsk_gov_var_statmod_holy_war_cult }
			lrsk_gov_var_statmod_harmony_cult = { remove_modifier = lrsk_gov_var_statmod_harmony_cult }
			lrsk_gov_var_statmod_chosen_few_cult = { remove_modifier = lrsk_gov_var_statmod_chosen_few_cult }
			lrsk_gov_var_statmod_universal_family_cult = { remove_modifier = lrsk_gov_var_statmod_universal_family_cult }
			lrsk_gov_var_statmod_doomsday_cult = { remove_modifier = lrsk_gov_var_statmod_doomsday_cult }
			lrsk_gov_var_statmod_golden_age_cult = { remove_modifier = lrsk_gov_var_statmod_golden_age_cult }
			lrsk_gov_var_statmod_wild_revelry_cult = { remove_modifier = lrsk_gov_var_statmod_wild_revelry_cult }
			lrsk_gov_var_statmod_penance_and_redemption_cult = { remove_modifier = lrsk_gov_var_statmod_penance_and_redemption_cult }
		}
	}
}

# Mark any neighbor systems satisfying the "escape route" criteria as such. Must be "reserved" later. (system scope)
lrsk_mark_hyperlane_escape_routes = {
	every_neighbor_system = {
		limit = { lrsk_is_hyperlane_escape_route = yes }
		set_star_flag = lrsk_visited
	}
}

# Cleanup task; actually reserves marked escape routes to future searches for escape routes ignore them
lrsk_reserve_hyperlane_escape_routes = {
	every_system = {
		limit = { has_star_flag = lrsk_visited }
		set_star_flag = lrsk_escape_route
		remove_star_flag = lrsk_visited
	}
}

# Sets ownership mark (system scope)
lrsk_mark_owned_system = {
	IF = { limit = { NOT = { has_star_flag = lrsk_marked_owned_system } }
		set_star_flag = lrsk_marked_owned_system
	}
}

# Sets escape route mark (system scope)
lrsk_mark_escape_route = {
	IF = { limit = { NOT = { has_star_flag = lrsk_marked_escape_route } }
		set_star_flag = lrsk_marked_escape_route
	}
}

# Offsets "Divided Patronage" loyalty penalty only for Chartered Colony subjects
lrsk_refresh_chartered_colony_loyalty_offset = {
	every_subject = {
		erase_modifier = { MOD = lrsk_gvp_colonial_mission_loyalty }
	}
	if = {
		limit = {
			NOR = {
				has_civic = civic_feudal_realm
				has_civic = civic_franchising
				has_ascension_perk = ap_shared_destiny
			}
			subjects > 1
			count_subject = {
				count > 1
				limit = { is_subject_with_preset = { PRESET = preset_lrsk_gov_var_subject_chartered_company } }
			}
		}
		set_variable = { which = lrsk_chartered_colony_minus_one value = 0 }
		every_subject = {
			limit = { is_subject_with_preset = { PRESET = preset_lrsk_gov_var_subject_chartered_company } }
			prev = { change_variable = { which = lrsk_chartered_colony_minus_one value = 1 } }
		}
		subtract_variable = { which = lrsk_chartered_colony_minus_one value = 1 }
		every_subject = {
			limit = { is_subject_with_preset = { PRESET = preset_lrsk_gov_var_subject_chartered_company } }
			add_modifier = {
				modifier = lrsk_gvp_colonial_mission_loyalty
				multiplier = prev.lrsk_chartered_colony_minus_one
			}
		}
		clear_variable = lrsk_chartered_colony_minus_one
	}
}

# Set as chartered colony subject with decaying opinion modifier.
lrsk_make_chartered_colony_subject = {
	# Need to do this because removing this preset in the Agreements menu will restore.
	store_country_backup_data = {
		name = yes
		government = yes
		ethics = yes
	}

	switch = {
		trigger = has_ethic
		ethic_fanatic_authoritarian = { shift_ethic = ethic_authoritarian }
		ethic_fanatic_egalitarian = { shift_ethic = ethic_egalitarian }
	}
	change_government = {
		authority = auth_corporate
		civics = {
			civic = lrsk_gov_var_civic_mc_chartered_company
			civic = random
		}
	}
	set_name = random # Fixes some naming issues

	# This flag set when establishing foreign rule.
	# Change the dominant species and "add" a pop of that species to the home planet
	# Make xenophobic and replace ruler (with new dominant species ruler)
	IF = { limit = { has_country_flag = lrsk_alien_rule_puppet }
		change_dominant_species = { species = event_target:lrsk_chartering_agent_species }

		capital_scope = {
			IF = {
				limit = {
					any_owned_pop = {
						has_job_category = ruler
						NOT = { is_same_species = event_target:lrsk_chartering_agent }
					}
				}
				random_owned_pop = {
					limit = {
						has_job_category = ruler
						NOT = { is_same_species = event_target:lrsk_chartering_agent }
					}
					change_species = event_target:lrsk_chartering_agent_species
				}
				create_pop = {
					species = owner_main_species
					ethos = {
						ethic = ethic_xenophile
					}
				}	
			}
			ELSE_IF = {
				limit = {
					any_owned_pop = {
						has_job_category = specialist
						NOT = { is_same_species = event_target:lrsk_chartering_agent }
					}
				}
				random_owned_pop = { 
					limit = {
						has_job_category = specialist
						NOT = { is_same_species = event_target:lrsk_chartering_agent }
					}
					change_species = event_target:lrsk_chartering_agent_species
				}
				create_pop = {
					species = owner_main_species
					ethos = {
						ethic = ethic_xenophile
					}
				}
			}
			ELSE_IF = {
				limit = { any_owned_pop = { NOT = { is_same_species = event_target:lrsk_chartering_agent } } }
				random_owned_pop = {
					limit = { NOT = { is_same_species = event_target:lrsk_chartering_agent } }
					change_species = event_target:lrsk_chartering_agent_species
				}
				create_pop = {
					species = owner_main_species
					ethos = {
						ethic = ethic_xenophile
					}
				}
			}
		}

		shift_ethic = ethic_xenophobe

		ruler = {
			kill_leader = {
				show_notification = no
				fire = yes
			}
		}

		every_owned_pop = { limit = { NOT = { is_same_species = event_target:lrsk_chartering_agent } }		
			set_citizenship_type = {
				country = prev
				type = citizenship_limited
				cooldown = yes
			}
		}
	}

	IF = { limit = { is_subject = yes }
		random_agreement = {
			limit = {
				owner = { is_same_value = event_target:lrsk_chartering_agent }
				target = { is_same_value = this }
			}
			set_agreement_preset = { preset = preset_lrsk_gov_var_subject_chartered_company }
		}
	}
	ELSE = {
		set_subject_of = {
			who = event_target:lrsk_chartering_agent
			preset = preset_lrsk_gov_var_subject_chartered_company
		}
	}

	IF = { 
		limit = { NOT = { 
			has_opinion_modifier = {
				who = event_target:lrsk_chartering_agent
				modifier = opinion_lrsk_gov_var_colonial_mission
			}
		} }
		add_opinion_modifier = {
			who = event_target:lrsk_chartering_agent
			modifier = opinion_lrsk_gov_var_colonial_mission
		}
	}
}

# Set as specified type of imperial economy special subject.
lrsk_make_impecon_special_subject = {
	random_agreement = {
		limit = {
			owner = { is_same_value = event_target:lrsk_impecon_colonizer }
			target = { is_same_value = this }
		}
		set_agreement_preset = { preset = $PRESET$ }
	}
}